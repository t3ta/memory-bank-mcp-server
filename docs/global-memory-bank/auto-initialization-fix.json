{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "auto-initialization-fix",
    "title": "メモリバンク自動初期化機能の修正計画",
    "documentType": "generic",
    "path": "auto-initialization-fix.json",
    "tags": [
      "fix",
      "auto-initialization",
      "memory-bank"
    ],
    "lastModified": "2025-03-22T01:49:00.000Z",
    "createdAt": "2025-03-22T01:49:00.000Z",
    "version": 1
  },
  "content": {
    "sections": [
      {
        "title": "問題の概要",
        "content": "メモリバンクが存在しない時に初期化されず、エラーが返ってしまう問題が発生しています。"
      },
      {
        "title": "原因分析",
        "content": "1. `ReadBranchCoreFilesUseCase`クラスでは、ブランチが存在しない場合にエラーをスローしています：\n\n```typescript\n// Check if branch exists\nconst branchExists = await this.branchRepository.exists(input.branchName);\n\nif (!branchExists) {\n  throw new DomainError(\n    DomainErrorCodes.BRANCH_NOT_FOUND,\n    `Branch \"${input.branchName}\" not found`\n  );\n}\n```\n\n2. 一方、`ReadContextUseCase`クラスには、ブランチが存在しない場合に自動的に初期化する処理が含まれています：\n\n```typescript\nif (!branchExists) {\n  console.log(`Branch ${branch} not found, auto-initializing...`);\n  try {\n    const branchInfo = BranchInfo.create(branch);\n    await this.branchRepository.initialize(branchInfo);\n    console.log(`Branch ${branch} auto-initialized successfully`);\n  } catch (initError) {\n    console.error(`Failed to auto-initialize branch ${branch}:`, initError);\n    throw new DomainError(\n      DomainErrorCodes.BRANCH_INITIALIZATION_FAILED,\n      `Failed to auto-initialize branch: ${branch}`\n    );\n  }\n}\n```\n\n3. `index.ts`の`read_context`ツールの実装では、`app.getBranchController().readCoreFiles(branch)`を使用していますが、これは`ReadBranchCoreFilesUseCase`を呼び出すため、ブランチが存在しない場合にエラーが発生します。"
      },
      {
        "title": "解決策",
        "content": "`ReadBranchCoreFilesUseCase`クラスを修正して、ブランチが存在しない場合に自動的に初期化する処理を追加します。"
      },
      {
        "title": "修正するファイル",
        "content": "`src/application/usecases/common/ReadBranchCoreFilesUseCase.ts`"
      },
      {
        "title": "修正内容",
        "content": "以下のコードを：\n\n```typescript\n// Check if branch exists\nconst branchExists = await this.branchRepository.exists(input.branchName);\n\nif (!branchExists) {\n  throw new DomainError(\n    DomainErrorCodes.BRANCH_NOT_FOUND,\n    `Branch \"${input.branchName}\" not found`\n  );\n}\n```\n\n以下のように修正します：\n\n```typescript\n// Check if branch exists\nconst branchExists = await this.branchRepository.exists(input.branchName);\n\nif (!branchExists) {\n  console.log(`Branch ${input.branchName} not found, auto-initializing...`);\n  try {\n    await this.branchRepository.initialize(branchInfo);\n    console.log(`Branch ${input.branchName} auto-initialized successfully`);\n  } catch (initError) {\n    console.error(`Failed to auto-initialize branch ${input.branchName}:`, initError);\n    throw new DomainError(\n      DomainErrorCodes.BRANCH_INITIALIZATION_FAILED,\n      `Failed to auto-initialize branch: ${input.branchName}`\n    );\n  }\n}\n```\n\nこの修正により、`ReadBranchCoreFilesUseCase`がブランチが存在しない場合に自動的に初期化するようになります。これにより、`read_context`ツールを使用する際にブランチが存在しない場合でもエラーが発生しなくなります。"
      },
      {
        "title": "期待される結果",
        "content": "- メモリバンクが存在しない場合に自動的に初期化されるようになります\n- エラーが返されなくなります\n- `ReadBranchCoreFilesUseCase`と`ReadContextUseCase`の両方が同じ動作をするようになり、一貫性が保たれます"
      },
      {
        "title": "実装上の注意点",
        "content": "- `branchInfo`変数は既に63行目で作成されているため、再度作成する必要はありません\n- ログメッセージは`ReadContextUseCase`と同様のフォーマットを使用しています\n- エラーハンドリングも`ReadContextUseCase`と同様の方法で実装しています"
      }
    ]
  }
}