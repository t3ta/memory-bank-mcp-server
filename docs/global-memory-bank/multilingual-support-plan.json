{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "7e6f5890-65b8-43f1-8d5f-982f4666541d",
    "title": "多言語対応計画（中国語サポート）",
    "documentType": "generic",
    "path": "multilingual-support-plan.md",
    "tags": [],
    "lastModified": "2025-03-17T02:13:31.720Z",
    "createdAt": "2025-03-17T02:13:31.720Z",
    "version": 1
  },
  "content": {
    "rawContent": "# 多言語対応計画（中国語サポート）\n\n## 概要\n\nMemory Bank MCPサーバーは現在、日本語と英語のみをサポートしていますが、グローバル展開に向けて中国語サポートを追加する必要があります。このドキュメントでは、中国語サポートを実装するための詳細な計画を提供します。\n\n## 現状分析\n\n### 現在の言語サポート構造\n\n現在のシステムでは以下の方法で言語サポートを実装しています：\n\n1. **言語型の定義**:\n   ```typescript\n   // src/shared/types/index.ts\n   export type Language = 'en' | 'ja';\n   ```\n\n2. **テンプレートファイルの管理**:\n   - `src/templates/rules-en.md`\n   - `src/templates/rules-ja.md`\n   - `src/templates/pull-request-template-en.md`\n   - `src/templates/pull-request-template.md` (日本語)\n   - `src/templates/develop-to-master-pr-template-en.md`\n   - `src/templates/develop-to-master-pr-template.md` (日本語)\n\n3. **言語切り替えロジック**:\n   ```typescript\n   // src/index.ts (例)\n   const isJapanese = language !== 'en';\n   let responseMessage = isJapanese\n     ? `pullRequest.md ファイルを作成しました。\\n\\n`\n     : `pullRequest.md file has been created.\\n\\n`;\n   ```\n\n4. **CLI言語オプション**:\n   ```typescript\n   // src/types.ts\n   export interface CliOptions {\n     workspace?: string;\n     memoryRoot?: string;\n     verbose?: boolean;\n     language?: 'en' | 'ja';\n   }\n   ```\n\n### 現在の課題\n\n1. 言語サポートがハードコードされている\n2. テンプレートファイルの命名が一貫していない\n3. 言語切り替えロジックが複数の場所に散在している\n4. 新しい言語を追加するプロセスが標準化されていない\n\n## 実装計画\n\n### フェーズ1: 言語サポート基盤の強化（1週間）\n\n#### 1.1 言語型の拡張\n\n```typescript\n// src/shared/types/index.ts\nexport type Language = 'en' | 'ja' | 'zh';\n```\n\n#### 1.2 言語設定の一元管理\n\n```typescript\n// src/infrastructure/config/language-config.ts\nimport { Language } from '../../shared/types/index.js';\n\nexport interface LanguageConfig {\n  code: Language;\n  name: string;\n  isDefault: boolean;\n  isEnabled: boolean;\n  fallback: Language;\n}\n\nexport const SUPPORTED_LANGUAGES: LanguageConfig[] = [\n  { code: 'en', name: 'English', isDefault: true, isEnabled: true, fallback: 'en' },\n  { code: 'ja', name: '日本語', isDefault: false, isEnabled: true, fallback: 'en' },\n  { code: 'zh', name: '中文', isDefault: false, isEnabled: true, fallback: 'en' },\n];\n\nexport function getDefaultLanguage(): Language {\n  const defaultLang = SUPPORTED_LANGUAGES.find(lang => lang.isDefault);\n  return defaultLang ? defaultLang.code : 'en';\n}\n\nexport function isLanguageSupported(language: string): boolean {\n  return SUPPORTED_LANGUAGES.some(lang => lang.code === language && lang.isEnabled);\n}\n\nexport function getSafeLanguage(language: string): Language {\n  return isLanguageSupported(language)\n    ? language as Language\n    : getDefaultLanguage();\n}\n```\n\n#### 1.3 テンプレートディレクトリ構造の標準化\n\n現在のテンプレートファイルを言語ごとのディレクトリに整理します：\n\n```\nsrc/\n  templates/\n    en/\n      rules.md\n      pull-request-template.md\n      develop-to-master-pr-template.md\n    ja/\n      rules.md\n      pull-request-template.md\n      develop-to-master-pr-template.md\n    zh/\n      rules.md\n      pull-request-template.md\n      develop-to-master-pr-template.md\n```\n\n#### 1.4 テンプレートローダーの実装\n\n```typescript\n// src/infrastructure/templates/TemplateLoader.ts\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Language } from '../../shared/types/index.js';\nimport { IConfigProvider } from '../config/interfaces/IConfigProvider.js';\nimport { getSafeLanguage } from '../config/language-config.js';\n\nexport class TemplateLoader {\n  constructor(private readonly configProvider: IConfigProvider) {}\n\n  async loadTemplate(templateName: string, language: Language): Promise<string> {\n    const safeLanguage = getSafeLanguage(language);\n    const fallbackLanguage = 'en'; // デフォルト言語\n\n    const templatePath = path.join(\n      this.configProvider.getTemplatesPath(),\n      safeLanguage,\n      `${templateName}.md`\n    );\n\n    try {\n      return await fs.readFile(templatePath, 'utf-8');\n    } catch (error) {\n      // 指定された言語のテンプレートが存在しない場合、デフォルト言語のテンプレートを使用\n      const fallbackPath = path.join(\n        this.configProvider.getTemplatesPath(),\n        fallbackLanguage,\n        `${templateName}.md`\n      );\n\n      try {\n        return await fs.readFile(fallbackPath, 'utf-8');\n      } catch (fallbackError) {\n        throw new Error(`Template not found: ${templateName} for language ${language}`);\n      }\n    }\n  }\n}\n```\n\n#### 1.5 DIコンテナへの登録\n\n```typescript\n// src/main/di/container.ts\nimport { TemplateLoader } from '../../infrastructure/templates/TemplateLoader.js';\n\n// 既存のDIコンテナ設定に追加\ncontainer.register('templateLoader', {\n  useFactory: (configProvider) => new TemplateLoader(configProvider),\n  dependencies: ['configProvider'],\n});\n```\n\n### フェーズ2: 中国語テンプレートの作成（1週間）\n\n#### 2.1 中国語テンプレートファイルの作成\n\n以下のテンプレートファイルを中国語で作成します：\n\n1. **src/templates/zh/rules.md**\n   ```markdown\n   # 记忆库规则\n\n   ## 概述\n   记忆库是一个用于存储和组织项目知识的系统。它帮助团队成员共享信息、记录决策并跟踪进度。\n\n   ## 使用指南\n   1. 每个分支都应该有自己的记忆库\n   2. 全局记忆库用于存储跨分支的信息\n   3. 使用标签来组织和查找文档\n   4. 定期更新活动上下文文档\n\n   ## 文档类型\n   - 分支上下文：描述分支的目的和用户故事\n   - 活动上下文：记录当前工作和最近的变更\n   - 系统模式：记录技术决策\n   - 进度：跟踪功能实现状态\n\n   ## 最佳实践\n   - 保持文档简洁明了\n   - 使用标准格式\n   - 定期更新\n   - 在提交PR前确保记忆库是最新的\n   ```\n\n2. **src/templates/zh/pull-request-template.md**\n   ```markdown\n   # 拉取请求\n\n   ## 概述\n   <!-- 描述此PR的目的和解决的问题 -->\n\n   ## 变更内容\n   <!-- 列出主要变更 -->\n   -\n\n   ## 测试\n   <!-- 描述如何测试这些变更 -->\n   -\n\n   ## 相关问题\n   <!-- 链接到相关问题 -->\n   -\n\n   ## 检查表\n   - [ ] 代码遵循项目编码标准\n   - [ ] 添加了适当的测试\n   - [ ] 文档已更新\n   - [ ] 记忆库已更新\n   ```\n\n3. **src/templates/zh/develop-to-master-pr-template.md**\n   ```markdown\n   # 开发到主分支的拉取请求\n\n   ## 版本\n   <!-- 指定版本号 -->\n   版本：\n\n   ## 概述\n   此PR将开发分支的变更合并到主分支。\n\n   ## 主要功能\n   <!-- 列出此版本中包含的主要功能 -->\n   -\n\n   ## 修复的错误\n   <!-- 列出此版本中修复的错误 -->\n   -\n\n   ## 测试结果\n   <!-- 提供测试结果摘要 -->\n   -\n\n   ## 部署说明\n   <!-- 提供任何特殊的部署说明 -->\n   -\n\n   ## 检查表\n   - [ ] 所有测试都已通过\n   - [ ] 版本号已更新\n   - [ ] 文档已更新\n   - [ ] 变更日志已更新\n   ```\n\n#### 2.2 中国語メッセージの追加\n\nメッセージを一元管理するためのローカライゼーションファイルを作成します：\n\n```typescript\n// src/locales/messages.ts\nimport { Language } from '../shared/types/index.js';\n\ntype MessageKey =\n  | 'pullRequestCreated'\n  | 'commitAndPush'\n  | 'runCommands'\n  | 'prInfo'\n  | 'title'\n  | 'targetBranch'\n  | 'labels';\n\nexport const messages: Record<Language, Record<MessageKey, string>> = {\n  en: {\n    pullRequestCreated: 'pullRequest.md file has been created.',\n    commitAndPush: 'Commit and push this file to automatically create a Pull Request via GitHub Actions.',\n    runCommands: 'Run the following commands:',\n    prInfo: 'PR Information:',\n    title: 'Title:',\n    targetBranch: 'Target branch:',\n    labels: 'Labels:',\n  },\n  ja: {\n    pullRequestCreated: 'pullRequest.md ファイルを作成しました。',\n    commitAndPush: 'このファイルをコミットしてプッシュすると、GitHub Actionsによって自動的にPull Requestが作成されます。',\n    runCommands: '以下のコマンドを実行してください:',\n    prInfo: 'PR情報:',\n    title: 'タイトル:',\n    targetBranch: 'ターゲットブランチ:',\n    labels: 'ラベル:',\n  },\n  zh: {\n    pullRequestCreated: 'pullRequest.md 文件已创建。',\n    commitAndPush: '提交并推送此文件，GitHub Actions将自动创建拉取请求。',\n    runCommands: '运行以下命令：',\n    prInfo: 'PR信息：',\n    title: '标题：',\n    targetBranch: '目标分支：',\n    labels: '标签：',\n  },\n};\n\nexport function getMessage(key: MessageKey, language: Language): string {\n  const safeLanguage = getSafeLanguage(language);\n  return messages[safeLanguage][key] || messages.en[key];\n}\n```\n\n#### 2.3 メッセージ使用の実装\n\n```typescript\n// src/index.ts (例)\nimport { getMessage } from './locales/messages.js';\n\n// 既存のコード\nlet responseMessage = getMessage('pullRequestCreated', language) + '\\n\\n';\nresponseMessage += getMessage('commitAndPush', language) + '\\n\\n';\nresponseMessage += getMessage('runCommands', language) + '\\n';\nresponseMessage += `git add ${pullRequest.filePath}\\n`;\nresponseMessage += language === 'zh'\n  ? `git commit -m \"chore: 准备PR\"\\n`\n  : (language === 'ja'\n    ? `git commit -m \"chore: PR作成準備\"\\n`\n    : `git commit -m \"chore: prepare PR\"\\n`);\nresponseMessage += `git push\\n\\n`;\nresponseMessage += getMessage('prInfo', language) + '\\n';\nresponseMessage += `${getMessage('title', language)} ${pullRequest.title}\\n`;\nresponseMessage += `${getMessage('targetBranch', language)} ${pullRequest.baseBranch}\\n`;\nresponseMessage += `${getMessage('labels', language)} ${pullRequest.labels.join(', ')}\\n`;\n```\n\n### フェーズ3: CLI引数とコンフィグの更新（3日間）\n\n#### 3.1 CLI引数の拡張\n\n```typescript\n// src/cli/index.ts\nimport { SUPPORTED_LANGUAGES } from '../infrastructure/config/language-config.js';\n\nconst argv = yargs(hideBin(process.argv))\n  .option('language', {\n    alias: 'l',\n    type: 'string',\n    description: 'Language code (en, ja, zh)',\n    choices: SUPPORTED_LANGUAGES.filter(lang => lang.isEnabled).map(lang => lang.code),\n    default: getDefaultLanguage(),\n  })\n  // 他のオプション\n  .help()\n  .parseSync();\n```\n\n#### 3.2 設定プロバイダーの更新\n\n```typescript\n// src/infrastructure/config/ConfigProvider.ts\nimport { Language } from '../../shared/types/index.js';\nimport { getSafeLanguage } from './language-config.js';\n\nexport class ConfigProvider implements IConfigProvider {\n  // 既存のコード\n\n  getLanguage(): Language {\n    return getSafeLanguage(this.config.language || 'en');\n  }\n\n  getTemplatesPath(): string {\n    return path.join(this.getRootPath(), 'src', 'templates');\n  }\n}\n```\n\n### フェーズ4: テストと統合（1週間）\n\n#### 4.1 単体テスト\n\n1. **TemplateLoaderのテスト**\n   ```typescript\n   // src/infrastructure/templates/__tests__/TemplateLoader.test.ts\n   import { describe, test, expect, beforeEach, jest } from '@jest/globals';\n   import { TemplateLoader } from '../TemplateLoader.js';\n\n   describe('TemplateLoader', () => {\n     let templateLoader: TemplateLoader;\n     let mockConfigProvider: any;\n\n     beforeEach(() => {\n       mockConfigProvider = {\n         getTemplatesPath: jest.fn().mockReturnValue('/mock/templates/path'),\n       };\n       templateLoader = new TemplateLoader(mockConfigProvider);\n     });\n\n     test('should load template for specified language', async () => {\n       // テスト実装\n     });\n\n     test('should fall back to English when template not found in specified language', async () => {\n       // テスト実装\n     });\n\n     test('should throw error when template not found in any language', async () => {\n       // テスト実装\n     });\n   });\n   ```\n\n2. **メッセージ機能のテスト**\n   ```typescript\n   // src/locales/__tests__/messages.test.ts\n   import { describe, test, expect } from '@jest/globals';\n   import { getMessage } from '../messages.js';\n\n   describe('Messages', () => {\n     test('should return message for English', () => {\n       expect(getMessage('pullRequestCreated', 'en')).toBe('pullRequest.md file has been created.');\n     });\n\n     test('should return message for Japanese', () => {\n       expect(getMessage('pullRequestCreated', 'ja')).toBe('pullRequest.md ファイルを作成しました。');\n     });\n\n     test('should return message for Chinese', () => {\n       expect(getMessage('pullRequestCreated', 'zh')).toBe('pullRequest.md 文件已创建。');\n     });\n\n     test('should fall back to English for unsupported language', () => {\n       // @ts-ignore - テスト用に無効な言語を渡す\n       expect(getMessage('pullRequestCreated', 'fr')).toBe('pullRequest.md file has been created.');\n     });\n   });\n   ```\n\n#### 4.2 統合テスト\n\n1. **中国語テンプレート読み込みのテスト**\n   ```typescript\n   // tests/integration/chinese-support.test.ts\n   import { describe, test, expect, beforeAll } from '@jest/globals';\n   import { createApplication } from '../../src/main/index.js';\n\n   describe('Chinese Language Support', () => {\n     let app: any;\n\n     beforeAll(async () => {\n       app = await createApplication({\n         memoryRoot: './test-docs',\n         language: 'zh',\n         verbose: false,\n       });\n     });\n\n     test('should load Chinese rules template', async () => {\n       const response = await app.getGlobalController().readRules('zh');\n       expect(response.success).toBe(true);\n       expect(response.data).toContain('记忆库规则');\n     });\n\n     test('should create PR with Chinese messages', async () => {\n       // テスト実装\n     });\n   });\n   ```\n\n#### 4.3 手動テスト計画\n\n1. CLIで中国語を指定して実行\n   ```bash\n   node dist/index.js --language zh\n   ```\n\n2. 中国語でのPR作成機能のテスト\n3. 中国語テンプレートの表示確認\n4. 言語切り替え機能の確認\n\n### フェーズ5: ドキュメント更新（2日間）\n\n#### 5.1 開発者向けドキュメント\n\n1. **多言語サポートガイド**\n   - 新しい言語の追加方法\n   - テンプレートの作成方法\n   - メッセージの追加方法\n   - テスト方法\n\n2. **APIドキュメント更新**\n   - 言語関連の新しいAPIの説明\n   - 設定オプションの更新\n\n#### 5.2 ユーザーガイド更新\n\n1. **言語設定の説明**\n   - CLIオプションの説明\n   - 設定ファイルでの言語指定方法\n\n2. **中国語サポートの説明**\n   - 中国語で利用可能な機能\n   - 中国語テンプレートの使用方法\n\n## 実装スケジュール\n\n| フェーズ | タスク | 担当者 | 期間 | 開始日 | 終了日 |\n|---------|-------|-------|------|-------|-------|\n| 1 | 言語サポート基盤の強化 | TBD | 1週間 | TBD | TBD |\n| 2 | 中国語テンプレートの作成 | TBD | 1週間 | TBD | TBD |\n| 3 | CLI引数とコンフィグの更新 | TBD | 3日間 | TBD | TBD |\n| 4 | テストと統合 | TBD | 1週間 | TBD | TBD |\n| 5 | ドキュメント更新 | TBD | 2日間 | TBD | TBD |\n\n## リスクと対策\n\n| リスク | 影響度 | 対策 |\n|-------|-------|------|\n| 中国語翻訳の品質 | 中 | ネイティブスピーカーによるレビュー |\n| 既存コードへの影響 | 高 | 段階的な実装と十分なテスト |\n| 文字エンコーディングの問題 | 中 | UTF-8の一貫した使用を確認 |\n| パフォーマンスへの影響 | 低 | テンプレートのキャッシュ機構の検討 |\n\n## 将来の拡張性\n\nこの実装は、将来的に他の言語（韓国語、フランス語、ドイツ語など）を追加する際の基盤となります。言語サポートの追加は以下の手順で行えます：\n\n1. `Language`型に新しい言語コードを追加\n2. `SUPPORTED_LANGUAGES`配列に新しい言語設定を追加\n3. 新しい言語用のテンプレートファイルを作成\n4. メッセージファイルに新しい言語のメッセージを追加\n5. テストを実行して確認\n\n## 結論\n\nこの計画に従って実装することで、Memory Bank MCPサーバーに中国語サポートを追加し、将来的な多言語対応の基盤を整えることができます。段階的なアプローチにより、既存の機能を損なうことなく、安全に新機能を追加することが可能です。\n",
    "sections": {
      "": "この計画に従って実装することで、Memory Bank MCPサーバーに中国語サポートを追加し、将来的な多言語対応の基盤を整えることができます。段階的なアプローチにより、既存の機能を損なうことなく、安全に新機能を追加することが可能です。"
    }
  }
}