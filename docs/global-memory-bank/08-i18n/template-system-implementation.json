{
  "schema": "memory_document_v1",
  "metadata": {
    "title": "template-system-implementation.json",
    "documentType": "generic",
    "path": "08-i18n/template-system-implementation.json",
    "tags": [],
    "lastModified": "2025-03-24T08:06:13.586Z"
  },
  "content": {
    "text": "{\n  \"schema\": \"memory_document_v2\",\n  \"metadata\": {\n    \"id\": \"template-system-implementation\",\n    \"title\": \"テンプレートシステムの実装ガイド\",\n    \"documentType\": \"document\",\n    \"path\": \"08-i18n/template-system-implementation.json\",\n    \"tags\": [\n      \"i18n\",\n      \"templates\",\n      \"implementation\",\n      \"guide\"\n    ],\n    \"lastModified\": \"2025-03-24T08:05:05.000Z\",\n    \"createdAt\": \"2025-03-24T08:05:05.000Z\",\n    \"version\": 1\n  },\n  \"content\": {\n    \"sections\": [\n      {\n        \"id\": \"overview\",\n        \"title\": \"概要\",\n        \"content\": \"このドキュメントでは、Memory Bank MCPサーバーのテンプレートシステムの正しい実装方法について説明します。テンプレートシステムは、JSONベースの構造化されたテンプレートと多言語対応（i18n）の機能を提供しています。このガイドに従うことで、テンプレートシステムの設計原則に準拠した実装を行うことができます。\"\n      },\n      {\n        \"id\": \"design-principles\",\n        \"title\": \"設計原則\",\n        \"content\": \"テンプレートシステムは、以下の原則に基づいて設計されています：\n\n1. **テンプレート構造とコンテンツの分離**\n   - テンプレート自体は言語に依存しない構造を持つ単一のJSONファイル\n   - 翻訳は別の言語ファイルに保存\n   - テンプレートは翻訳キーを参照し、実際のテキストは言語ファイルから取得\n\n2. **多言語対応（i18n）**\n   - 英語（en）、日本語（ja）、中国語（zh）の3言語をサポート\n   - 言語ファイルは `src/infrastructure/i18n/translations/` ディレクトリに配置\n   - 翻訳キーは階層的な命名規則に従う（例：`template.title.rules`）\n\n3. **テンプレートの構造**\n   - テンプレートはID、タイプ、バージョン、セクションなどの情報を持つ\n   - セクションはタイトルキー、コンテンツキー、オプション設定などを持つ\n   - 変数はプレースホルダーとして定義され、レンダリング時に置換される\"\n      },\n      {\n        \"id\": \"template-structure\",\n        \"title\": \"テンプレートの構造\",\n        \"content\": \"テンプレートファイルは以下の構造を持つJSONファイルです：\n\n```json\n{\n  \"id\": \"template-id\",\n  \"type\": \"template-type\",\n  \"version\": \"2.0.0\",\n  \"titleKey\": \"template.title.template_id\",\n  \"descriptionKey\": \"template.description.template_id\",\n  \"sections\": [\n    {\n      \"id\": \"section1\",\n      \"titleKey\": \"template.section.section1\",\n      \"contentKey\": \"template.content.section1\",\n      \"isOptional\": false\n    },\n    {\n      \"id\": \"section2\",\n      \"titleKey\": \"template.section.section2\",\n      \"contentKey\": \"template.content.section2\",\n      \"isOptional\": true\n    }\n  ],\n  \"createdAt\": \"2025-03-24T00:00:00Z\",\n  \"updatedAt\": \"2025-03-24T00:00:00Z\"\n}\n```\n\n各フィールドの説明：\n\n- `id`: テンプレートを一意に識別するID\n- `type`: テンプレートのタイプ（例：「system」、「user」など）\n- `version`: テンプレートのバージョン\n- `titleKey`: テンプレートのタイトルを取得するための翻訳キー\n- `descriptionKey`: テンプレートの説明を取得するための翻訳キー\n- `sections`: テンプレートのセクションの配列\n  - `id`: セクションを一意に識別するID\n  - `titleKey`: セクションのタイトルを取得するための翻訳キー\n  - `contentKey`: セクションのコンテンツを取得するための翻訳キー\n  - `isOptional`: このセクションが省略可能かどうか\n- `createdAt`: テンプレートの作成日時\n- `updatedAt`: テンプレートの最終更新日時\"\n      },\n      {\n        \"id\": \"translation-structure\",\n        \"title\": \"翻訳ファイルの構造\",\n        \"content\": \"翻訳ファイルは以下の構造を持つJSONファイルです：\n\n```json\n{\n  \"language\": \"ja\",\n  \"translations\": {\n    \"template.title.rules\": \"メモリーバンクのルール\",\n    \"template.description.rules\": \"メモリーバンクの使用ルールと構造に関する説明\",\n    \"template.section.global_memory_bank\": \"グローバルメモリバンク\",\n    \"template.content.global_memory_bank\": \"グローバルメモリバンクは、プロジェクト全体で共有される知識を保存するための中央リポジトリです。すべてのブランチから参照可能で、プロジェクトの基本情報、アーキテクチャ、設計決定などの重要な情報を含みます。\"\n  },\n  \"metadata\": {\n    \"version\": \"1.0.0\",\n    \"updatedAt\": \"2025-03-24T00:00:00Z\"\n  }\n}\n```\n\n各フィールドの説明：\n\n- `language`: 翻訳の言語コード\n- `translations`: キーと翻訳テキストのマップ\n- `metadata`: 翻訳ファイルのメタデータ\n  - `version`: 翻訳ファイルのバージョン\n  - `updatedAt`: 翻訳ファイルの最終更新日時\n\n翻訳キーの命名規則には以下のような階層的な構造を使用します：\n\n- `template.title.<template-id>`: テンプレートの名前\n- `template.description.<template-id>`: テンプレートの説明\n- `template.section.<section-id>`: セクションのタイトル\n- `template.content.<section-id>`: セクションのコンテンツ\n- `template.placeholder.<placeholder-id>`: プレースホルダーのデフォルト値\n- `template.footer.<template-id>`: テンプレートのフッター\"\n      },\n      {\n        \"id\": \"implementation-steps\",\n        \"title\": \"実装手順\",\n        \"content\": \"テンプレートシステムを正しく実装するための手順は以下の通りです：\n\n1. **テンプレートファイルの作成**\n   - 言語に依存しない単一のテンプレートファイルを作成する\n   - 翻訳キーを使用して、タイトル、説明、セクションなどを定義する\n   - テンプレートファイルを `docs/templates/json/` ディレクトリに配置する\n\n2. **翻訳ファイルの作成・更新**\n   - 各言語（en, ja, zh）の翻訳ファイルを作成または更新する\n   - テンプレートで使用されているすべての翻訳キーに対応する翻訳を追加する\n   - 翻訳ファイルを `src/infrastructure/i18n/translations/` ディレクトリに配置する\n\n3. **テンプレートローダーの使用**\n   - `ITemplateLoader` インターフェースを実装したクラスを使用する\n   - `getMarkdownTemplate` メソッドを使用して、テンプレートをMarkdown形式で取得する\n   - 言語コードと変数を指定して、テンプレートをレンダリングする\n\n4. **ReadRulesUseCaseの修正**\n   - テンプレートローダーを使用するように修正する\n   - 言語コードを安全に変換する\n   - エラーハンドリングを追加する\"\n      },\n      {\n        \"id\": \"example-implementation\",\n        \"title\": \"実装例\",\n        \"content\": \"### テンプレートファイルの例（rules.json）\n\n```json\n{\n  \"id\": \"rules\",\n  \"type\": \"system\",\n  \"version\": \"2.0.0\",\n  \"titleKey\": \"template.title.rules\",\n  \"descriptionKey\": \"template.description.rules\",\n  \"sections\": [\n    {\n      \"id\": \"global_memory_bank\",\n      \"titleKey\": \"template.section.global_memory_bank\",\n      \"contentKey\": \"template.content.global_memory_bank\",\n      \"isOptional\": false\n    },\n    {\n      \"id\": \"branch_memory_bank\",\n      \"titleKey\": \"template.section.branch_memory_bank\",\n      \"contentKey\": \"template.content.branch_memory_bank\",\n      \"isOptional\": false\n    }\n  ],\n  \"createdAt\": \"2025-03-24T00:00:00Z\",\n  \"updatedAt\": \"2025-03-24T00:00:00Z\"\n}\n```\n\n### 翻訳ファイルの例（ja.json）\n\n```json\n{\n  \"language\": \"ja\",\n  \"translations\": {\n    \"template.title.rules\": \"メモリーバンクのルール\",\n    \"template.description.rules\": \"メモリーバンクの使用ルールと構造に関する説明\",\n    \"template.section.global_memory_bank\": \"グローバルメモリバンク\",\n    \"template.content.global_memory_bank\": \"グローバルメモリバンクは、プロジェクト全体で共有される知識を保存するための中央リポジトリです。すべてのブランチから参照可能で、プロジェクトの基本情報、アーキテクチャ、設計決定などの重要な情報を含みます。\",\n    \"template.section.branch_memory_bank\": \"ブランチメモリバンク\",\n    \"template.content.branch_memory_bank\": \"ブランチメモリバンクは、特定のブランチ（機能実装や修正作業）に関連する情報を保存するためのメモリバンクです。各ブランチには独自のメモリバンクがあり、そのブランチ固有のコンテキスト情報を保持します。\"\n  },\n  \"metadata\": {\n    \"version\": \"1.0.0\",\n    \"updatedAt\": \"2025-03-24T00:00:00Z\"\n  }\n}\n```\n\n### ReadRulesUseCaseの実装例\n\n```typescript\nimport { ITemplateLoader } from \"../../../infrastructure/templates/interfaces/ITemplateLoader.js\";\nimport { Language, getSafeLanguage } from \"../../../schemas/v2/i18n-schema.js\";\nimport { DomainError, DomainErrorCodes } from \"../../../shared/errors/DomainError.js\";\nimport { logger } from \"../../../shared/utils/logger.js\";\n\nexport type RulesResult = {\n  content: string;\n  language: string;\n};\n\nexport class ReadRulesUseCase {\n  private readonly supportedLanguages = ['en', 'ja', 'zh'];\n\n  constructor(\n    private readonly templateLoader: ITemplateLoader\n  ) {}\n\n  async execute(language: string): Promise<RulesResult> {\n    // 言語コードのバリデーション\n    if (!this.supportedLanguages.includes(language)) {\n      throw new DomainError(\n        DomainErrorCodes.VALIDATION_ERROR,\n        `Unsupported language code: ${language}. Supported languages are: ${this.supportedLanguages.join(', ')}`\n      );\n    }\n\n    try {\n      logger.debug(`Using template loader to get rules for language: ${language}`);\n      \n      // 言語コードを安全に変換\n      const safeLanguage = getSafeLanguage(language);\n      \n      const content = await this.templateLoader.getMarkdownTemplate(\n        'rules',\n        safeLanguage\n      );\n\n      return {\n        content,\n        language\n      };\n    } catch (error) {\n      throw new DomainError(\n        DomainErrorCodes.DOCUMENT_NOT_FOUND,\n        `Rules file not found for language: ${language}`,\n        { originalError: error }\n      );\n    }\n  }\n}\n```\"\n      },\n      {\n        \"id\": \"migration-guide\",\n        \"title\": \"移行ガイド\",\n        \"content\": \"既存のテンプレートシステムから新しいテンプレートシステムへの移行は、以下の手順で行います：\n\n1. **テンプレートファイルの統合**\n   - 言語ごとのテンプレートファイル（rules-en.json, rules-ja.json, rules-zh.json）を単一のテンプレートファイル（rules.json）に統合する\n   - 翻訳キーを使用するように修正する\n\n2. **翻訳ファイルの更新**\n   - 各言語の翻訳ファイルに、テンプレートで使用されているすべての翻訳キーに対応する翻訳を追加する\n\n3. **ReadRulesUseCaseの修正**\n   - テンプレートローダーを使用するように修正する\n   - 言語コードを安全に変換する\n   - エラーハンドリングを追加する\n\n4. **DIコンテナの設定**\n   - DIコンテナの設定を更新して、ReadRulesUseCaseにITemplateLoaderを注入するようにする\n\n5. **テストの更新**\n   - テストでもテンプレートシステムを使用するように修正する\n   - テンプレートローダーのモックを作成する\n\n移行期間中は、両方のシステムをサポートするために、ReadRulesUseCaseでは、テンプレートローダーでの読み込みに失敗した場合に従来の方法にフォールバックするようにしています。これにより、段階的な移行が可能になります。\"\n      },\n      {\n        \"id\": \"best-practices\",\n        \"title\": \"ベストプラクティス\",\n        \"content\": \"テンプレートシステムを使用する際のベストプラクティスは以下の通りです：\n\n1. **テンプレート構造とコンテンツの分離**\n   - テンプレートファイルには、構造情報のみを含め、実際のテキストは含めない\n   - すべてのテキストは翻訳キーを通じて参照する\n\n2. **翻訳キーの命名規則**\n   - 翻訳キーは階層的な命名規則に従う\n   - テンプレートID、セクションID、プレースホルダーIDなどを含める\n   - 一貫性のある命名規則を使用する\n\n3. **テンプレートローダーの使用**\n   - 直接ファイルシステムからJSONファイルを読み込むのではなく、テンプレートローダーを使用する\n   - テンプレートローダーは、テンプレートの読み込み、検証、レンダリングなどの機能を提供する\n\n4. **エラーハンドリング**\n   - テンプレートや翻訳が見つからない場合のフォールバック処理を実装する\n   - エラーメッセージは具体的で、問題の特定に役立つものにする\n\n5. **テスト**\n   - テンプレートシステムのテストを作成する\n   - テンプレートローダーのモックを使用して、テストを簡素化する\n   - 多言語対応のテストを追加する\"\n      },\n      {\n        \"id\": \"conclusion\",\n        \"title\": \"結論\",\n        \"content\": \"テンプレートシステムは、Memory Bank MCPサーバーの重要な機能の一つです。テンプレート構造とコンテンツの分離という原則に従うことで、多言語対応の保守性と拡張性が向上します。このガイドに従って実装することで、テンプレートシステムの設計原則に準拠した実装を行うことができます。\"\n      }\n    ]\n  }\n}"
  }
}