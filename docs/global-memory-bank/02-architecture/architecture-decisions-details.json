{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "architecture-decisions-details",
    "title": "アーキテクチャ決定事項詳細",
    "documentType": "architecture",
    "path": "02-architecture/architecture-decisions-details.json",
    "tags": [
      "architecture",
      "decision",
      "json",
      "v2"
    ],
    "lastModified": "2025-03-21T07:21:59.896Z",
    "createdAt": "2025-03-21T10:35:00.000Z",
    "version": 1
  },
  "content": {
    "sections": [
      {
        "title": "JSON専用データ形式への移行",
        "content": "現在のMemory Bankはドキュメント保存形式としてMarkdownとJSONの両方をサポートしています。これにより以下の問題が発生しています：",
        "issues": [
          "双方向変換ロジックの複雑さ（Markdown⇔JSON）",
          "変換時の情報欠落リスク",
          "テストコードの肥大化",
          "マイナーアップデートの度に両方のフォーマットテストが必要",
          "スキーマの厳密な検証が難しい",
          "データベースへの将来的な移行が複雑になる"
        ],
        "decision": "Memory Bank 2.0では、JSONを唯一のデータ保存形式とし、Markdownサポートを完全に廃止する。",
        "benefits": [
          "データモデルをスキーマファーストで定義",
          "型安全性の向上",
          "検証プロセスの簡素化",
          "コードベースの軽量化",
          "将来の拡張性向上",
          "コードベースがシンプルになり、理解と保守が容易になる",
          "構造化データとしてクエリやフィルタリングが容易",
          "スキーマによる厳密な型チェックが可能",
          "テストが単純化され、カバレッジが向上",
          "将来的なデータベース（SurrealDB等）への移行パスが明確"
        ],
        "tradeoffs": [
          "Markdownの人間可読性が失われる",
          "既存のMarkdownファイルを移行する必要がある",
          "エディタ、ビューワー等のツールが必要になる",
          "バージョン1.xと互換性がなくなる"
        ],
        "mitigations": [
          "JSON→Markdown変換機能を別のレイヤー（表示レイヤー）として実装可能",
          "マイグレーションスクリプトによる既存ファイルの自動変換",
          "CLIツールの拡張でJSONの読み書きを支援",
          "明確な移行ガイドの提供"
        ]
      },
      {
        "title": "スキーマ駆動設計",
        "content": "データモデルはスキーマで厳密に定義し、すべてのデータ操作はこのスキーマに基づいて行います。",
        "decision": "Zodを使用したスキーマ検証を導入し、型安全性を確保する。",
        "benefits": [
          "実行時の型検証",
          "ドキュメント間の構造的一貫性",
          "TypeScriptの型推論による開発者体験向上",
          "バグの早期発見"
        ]
      },
      {
        "title": "リポジトリパターン",
        "content": "ドメインエンティティのストレージと検索を抽象化するためにリポジトリパターンを採用します。",
        "decision": "ストレージに依存しない操作を可能にするリポジトリインターフェースを定義する。",
        "benefits": [
          "ストレージ実装の交換可能性",
          "テスト容易性",
          "関心の分離",
          "将来的なデータベース移行の容易化"
        ]
      },
      {
        "title": "インデックス機構改善",
        "content": "現在の複数インデックスの問題を解決するために、インデックス機構を再設計します。",
        "decision": "長期的には `tags/index.json` を標準とし、`_global_index.json` は段階的に廃止する。",
        "benefits": [
          "管理の一元化",
          "メタデータの向上",
          "検索機能強化"
        ],
        "implementation": "ブラウザによるインデックス参照を保持するために当面は両方のインデックスを維持しつつ、内部的には新しいインデックス機構に移行します。"
      }
    ]
  }
}
