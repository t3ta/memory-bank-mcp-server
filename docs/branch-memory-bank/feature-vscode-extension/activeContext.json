{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "54cecd0e-e406-4890-a78f-e7c1542d9702",
    "title": "アクティブコンテキスト",
    "documentType": "active_context",
    "path": "activeContext.json",
    "tags": [
      "active-context",
      "vscode-extension"
    ],
    "lastModified": "2025-03-30T14:31:43.000Z",
    "createdAt": "2025-03-30T05:25:42.076Z",
    "version": 2
  },
  "content": {
    "currentWork": "VS Code拡張機能（メモリバンク編集機能＋AI連携による重複情報整理機能）の初期計画と設計",
    "recentChanges": [],
    "activeDecisions": [
      {
        "id": "decision-tech-1",
        "description": "メイン開発言語としてTypeScriptを採用 (vscode-extension-plan-part1)"
      },
      {
        "id": "decision-tech-2",
        "description": "UIコンポーネント開発にReact (WebView) を採用 (vscode-extension-plan-part1)"
      },
      {
        "id": "decision-tech-3",
        "description": "JSONスキーマ検証にZodとJSONSchemaを併用 (vscode-extension-plan-part1)"
      },
      {
        "id": "decision-ai-1",
        "description": "AI連携のコアモデルとしてGemini 1.5 Proを使用 (vscode-extension-ai-integration)"
      },
      {
        "id": "decision-ai-2",
        "description": "Gemini API認証はAPIキー方式を基本とする (vscode-extension-ai-integration)"
      }
    ],
    "considerations": [
      {
        "id": "consideration-ai-1",
        "description": "AIのコンテキスト理解精度と提案品質の確保 (vscode-extension-ai-integration)",
        "status": "open"
      },
      {
        "id": "consideration-ai-2",
        "description": "Gemini APIのレート制限とコスト管理 (vscode-extension-ai-integration)",
        "status": "open"
      },
      {
        "id": "consideration-ai-3",
        "description": "AI機能における適切なユーザー介入のバランス設計 (vscode-extension-ai-integration)",
        "status": "open"
      },
      {
        "id": "consideration-ai-4",
        "description": "AI連携時のプライバシーとセキュリティ確保 (vscode-extension-ai-integration)",
        "status": "open"
      }
    ],
    "nextSteps": [
      {
        "id": "next-step-1",
        "description": "VS Code拡張プロジェクトのセットアップとビルド環境構築 (task-1-1)",
        "priority": "high"
      },
      {
        "id": "next-step-2",
        "description": "`MemoryBankProvider` の基本インターフェース定義とファイル読み書き機能の実装 (task-1-2)",
        "priority": "high"
      },
      {
        "id": "next-step-3",
        "description": "`SchemaProvider` を実装し、`packages/schemas` からスキーマをロードする機能を追加 (task-1-3)",
        "priority": "medium"
      },
      {
        "id": "next-step-4",
        "description": "VS Code TreeView API を使用した基本的なメモリバンクエクスプローラーのUI実装 (task-1-4)",
        "priority": "medium"
      },
      {
        "id": "next-step-5",
        "description": "VS Code CustomEditor API を使用した基本的なJSONドキュメント編集機能の実装 (task-1-5)",
        "priority": "medium"
      },
      {
        "id": "next-step-6",
        "description": "Gemini API 接続の基本実装と認証処理の確立 (AI)",
        "priority": "medium"
      },
      {
        "id": "next-step-7",
        "description": "AI アシスタントパネルの基本的な WebView UI 実装 (AI)",
        "priority": "medium"
      },
      {
        "id": "next-step-8",
        "description": "重複検出アルゴリズムのプロトタイプ開発 (AI)",
        "priority": "low"
      },
      {
        "id": "next-step-9",
        "description": "テキスト埋め込みサービスの初期実装 (AI)",
        "priority": "low"
      }
    ]
  }
}