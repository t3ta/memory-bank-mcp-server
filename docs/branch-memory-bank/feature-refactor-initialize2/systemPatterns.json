{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "bddc3c9b-18ea-4ea6-af7e-f2ad0f53111a",
    "title": "システムパターン",
    "documentType": "system_patterns",
    "path": "systemPatterns.json",
    "tags": [
      "system-patterns"
    ],
    "lastModified": "2025-03-27T12:03:45.497Z",
    "createdAt": "2025-03-27T12:03:45.497Z",
    "version": 1
  },
  "content": {
    "technicalDecisions": [
      {
        "id": "92fb39ad-04bf-44bb-828d-9d83959266ab",
        "title": "初期化処理リファクタリングのアプローチ",
        "context": "現在、ブランチメモリバンクの初期化処理には複数の問題がある：\n1. コアファイル生成時のタグが不整合（'core'タグが欠けている）\n2. ReadContextUseCase内のエラーハンドリングが不十分\n3. 各クラスでのテンプレート定義に重複がある",
        "decision": "以下の3つのアプローチでリファクタリングを行う：\n1. FileSystemBranchMemoryBankRepositoryの初期化処理を修正し、すべてのコアファイルに'core'タグと機能固有タグの両方を設定\n2. ReadContextUseCaseのエラー処理を強化し、より具体的なエラーメッセージを提供\n3. テンプレート定義を一元管理するか、一貫性を保証する仕組みを導入",
        "consequences": {
          "positive": [
            "メモリバンク初期化の信頼性向上",
            "エラーメッセージの改善による開発者体験の向上",
            "タグの一貫性確保によるタグベース検索の信頼性向上",
            "コードの重複減少によるメンテナンス性の向上"
          ],
          "negative": []
        },
        "status": "proposed",
        "date": "2025-03-27T12:03:45.497Z",
        "alternatives": []
      },
      {
        "id": "a3f1b524-e7c9-42d5-ae45-d5f5d2e8c7b9",
        "title": "タグ一貫性の確保方法",
        "context": "現在、FileSystemBranchMemoryBankRepositoryのdefaultTemplatesで生成されるJSONファイルには、個別のタグ（例：'active-context'）のみが設定されており、'core'タグが含まれていない。一方、他の場所では両方のタグが期待されている。",
        "decision": "FileSystemBranchMemoryBankRepositoryのdefaultTemplatesを修正し、すべてのコアファイルに'core'タグと機能固有タグの両方を必ず含める。タグ配列の最初の要素を'core'に統一し、二番目の要素を機能固有タグ（例：'active-context'）とする。",
        "consequences": {
          "positive": [
            "タグベースの検索が期待通りに動作するようになる",
            "すべてのコアファイルに一貫したタグ付け規則が適用される",
            "コードの理解や維持が容易になる"
          ],
          "negative": [
            "既存のデータに対する後方互換性の配慮が必要になる可能性がある"
          ]
        },
        "status": "proposed",
        "date": "2025-03-27T12:03:45.497Z",
        "alternatives": [
          {
            "description": "タグ付けロジックを抽象化し、共通のヘルパー関数として実装する",
            "reason": "より柔軟性があるが、複雑性が増す可能性がある"
          }
        ]
      },
      {
        "id": "7d90e3f1-c8b2-4a6d-bf4c-e3d75f2a9b81",
        "title": "グローバルメモリバンク初期化の追加",
        "context": "ReadContextUseCaseでコンテキストを読み込む際、ブランチメモリバンクは自動初期化されるが、グローバルメモリバンクは初期化されない。そのため、グローバルメモリバンクの構造が正しく初期化されていない可能性があり、coreファイルなどの基本的なドキュメントが不足している状態になりうる。",
        "decision": "ReadContextUseCaseでコンテキストを読み込む際、ブランチメモリバンクだけでなくグローバルメモリバンクも初期化するようにする。また、初期化を行う前にグローバルメモリバンクの存在確認と構造検証を行い、必要な場合のみ初期化を実行する。",
        "consequences": {
          "positive": [
            "グローバルメモリバンクの初期化が確実に行われる",
            "初期状態でコアファイルが正しく生成される",
            "core/ディレクトリが存在しない場合にエラーを防止できる"
          ],
          "negative": [
            "初期化処理が追加されるため、ReadContextUseCaseの実行時間が少し長くなる可能性がある"
          ]
        },
        "status": "proposed",
        "date": "2025-03-27T15:30:00.000Z",
        "alternatives": [
          {
            "description": "グローバルメモリバンクの初期化を必須にした上で、アプリケーション起動時に行う",
            "reason": "アプリケーションレベルで初期化が必須になるが、後からそれを忘れてCLIコマンドで直接呼び出した場合に問題が発生する可能性がある"
          }
        ]
      },
      {
        "id": "e4f29b75-d1a3-47c8-b835-c5a2d6e8a91f",
        "date": "2025-03-27T16:00:00.000Z",
        "title": "コアファイル操作のための専用メソッド追加",
        "status": "proposed",
        "context": "現在のバージョンではread_とwrite_のメソッドしかなく、コアファイルの作成と削除に特化した操作がない。これにより、特に削除においてコアファイルが誤って消されるリスクがある。また、新規作成時には適切なテンプレートで初期化する必要がある。",
        "decision": "既存のread_/write_メソッドに加えて、create_とdelete_メソッドを新たに追加する。特にdelete_メソッドにはコアファイルの保護機能を組み込み、誤削除を防止する。",
        "alternatives": [
          {
            "reason": "プロテクション付きメソッドだと柔軟性が下がり、開発者にとって不便になる可能性がある",
            "description": "既存のwrite_/read_メソッドにオプションパラメータを追加することで同様の機能を実現する"
          },
          {
            "reason": "既存の関数に新しいパラメータを追加すると後方互換性の問題が生じる可能性がある",
            "description": "削除確認をUI層で行い、APIレベルではプロテクションを実装しない"
          }
        ],
        "consequences": {
          "negative": [
            "新しいAPIを学ぶ必要がある",
            "コードベースが少し複雑になる"
          ],
          "positive": [
            "コアファイルが誤って削除されるリスクが大幅に低下する",
            "新規ファイル作成時に適切なテンプレートが自動的に適用される",
            "操作の意図が明確になり、コードの可読性が向上する",
            "将来的にファイル操作に関するアナリティクスや監査が容易になる"
          ]
        }
      }
    ],
    "implementationPatterns": []
  }
}