# AIエージェント向けルール（AIコーディング用）

---

## モード定義

### Architectモード（デフォルト）

- モード指定が明示されなかった場合はArchitectモードで作業を行う
- 設計・仕様検討を支援するモード
- **コードの生成・編集は一切行わない**
- **ドキュメントやメモリバンクの編集のみを行う**
- `write_branch_memory_bank`を用いて仕様や設計を記述する
- モード切り替えは**ユーザーの明示的なコマンド指示によってのみ**行う

#### Architectモード開始時の初期フロー

Architectモードで作業を開始する際は、以下の手順を厳守する：

1. `write_to_terminal` で `git branch --show-current` を実行し、**現在のブランチ名**を確認する
2. `read_context` で **全体の設計・状態・ルールを読み取る**（`language: ja`, `branch`指定を必ず行う）
3. **不明な仕様・設計・背景があればユーザーに確認し、返答を得る**
4. `write_branch_memory_bank` で作業計画や設計内容を記述・更新する（**形式はJSONで、Markdownは使用不可**）
5. 十分な情報が揃ったら作業計画を出力し、次のモードへ進むか判断する
6. モード切り替えを行う場合は、`write_branch_memory_bank` に記録後、ユーザーが明示的にコマンドで指示する

### Codeモード

- コードの実装を行う
- `ts-language-server`を用いて編集・診断を行う
- 実装前後で `write_branch_memory_bank` により記録を残す
- 実装完了後はコミットを行いArchitectモードへ戻る

### Debugモード

- テストとビルドを実行し、エラーを修正する
- `ts-language-server`と`iTerm`を併用してデバッグ作業を進める
- 必要に応じて `write_branch_memory_bank` に記録
- **テストは選択的に実行する。数が多いため、すべてを実行しないこと**
  - **特にE2Eテストは時間がかかるため、ユーザーの明示的な指示がない限り実行しないこと**

---

## モード切り替えルール

- **すべてのモード切り替えはユーザーの明示的なコマンド指示によってのみ行う**
- AIが自動でモードを切り替えることは禁止
- 切り替え前には `write_branch_memory_bank` で直前の作業内容を記録する

### モード切り替えコマンド（※ユーザー専用）

モードの切り替えは**ユーザーが以下のコマンドを送信することでのみ行う**。
AIエージェントがこれらのコマンドを**自発的に送信することは禁止**。

```bash
/mode arch   # Architectモードに切り替え（ユーザーのみ実行可能）
/mode code   # Codeモードに切り替え（ユーザーのみ実行可能）
/mode debug  # Debugモードに切り替え（ユーザーのみ実行可能）
```

> 🛑 モードの遷移はユーザーの権限であり、AIは絶対にこれらのコマンドを送信してはならない。

---

## 使用ツールの優先順位

### 1. TypeScript Language Server（`ts-language-server`）

- `apply_text_edit`：基本的な編集
- `get_diagnostics`：エラー診断
- `find_references`, `read_definition`：リファレンス確認・定義取得
- `execute_codelens`, `get_codelens`：コードレンズ対応

### 2. Memory Bank（`memory-bank-mcp-server`）

- `read_context`, `read_rules`：ルール・コンテキストの取得（必ず `language: ja` および `branch` を指定）
- `write_branch_memory_bank`, `write_global_memory_bank`：記録・設計の保存（形式はJSON）
- `read_branch_memory_bank`, `read_global_memory_bank`：記録の取得

### 3. iTerm Terminal（`iterm-mcp`）

- `write_to_terminal`：コマンド実行（Git / npm / yarnなど）
- `read_terminal_output`：実行結果取得
- `send_control_character`：中断操作など

#### 許可されているGit操作

| 操作                    | 許可 | 備考                                 |
| ----------------------- | ---- | ------------------------------------ |
| ブランチ確認            | ✅   | `git branch --show-current`          |
| ステージング + コミット | ✅   | `git add . && git commit`            |
| **ブランチ作成**        | ❌   | **AIはブランチを作成してはならない** |
| **マージ・リベース**    | ❌   | **AIは実行してはならない**           |

### 4. claude_code系ツール

- `Edit`, `GlobTool`, `GrepTool`, `Replace`, `View`
- 言語サーバーで対応不可な場合の補助的な利用に留める
- `Replace`など直接書き換え系は最終手段とする

### 5. Puppeteer系

- UI操作などが必要な場合のみ使用（基本的には使用しない）

---

## テスト駆動開発（TDD）

### 開発サイクル

1. **Red**：まず失敗するテストを書く
2. **Green**：テストが通るように最小限の実装をする
3. **Refactor**：コードを改善

### テスト設計方針

- テストは実装の仕様と考える
- **Assert → Act → Arrange** の順で記述
- テスト名は「状況 → 操作 → 結果」の形式

### 例（TypeScript）

```ts
test('valid token → fetch user → success', async () => {
  // Arrange
  const api = createTestApi();

  // Act
  const result = await api.getUser('valid-token');

  // Assert
  expect(result.ok).toBe(true);
});
```

---

## コーディング規約（TypeScript）

### 全体方針

- コードとコメントはすべて英語で記述する
- 日本語はすべて英語に置き換える
- ファイルは500行を超えないように設計

### 型と関数設計

- まず型定義から考える
- `any`は避け、`unknown` + 絞り込みを基本とする
- 意味のある型名・型エイリアスを用いる

### クリーンアーキテクチャ方針

- 外部依存はアダプタパターンで抽象化
- 副作用を分離し、モックで差し替え可能に
- 関数ベース実装を優先し、状態を持つときのみclass使用

### テスト容易性

- モックは簡潔に
- エッジケースも含める
- テストヘルパーは分離して再利用可能に

---

## その他の前提

- このプロジェクトのルートディレクトリは：`/Users/t3ta/workspace/memory-bank-mcp-server`
- `read_context` 実行時は常に `language: ja` と `branch` の指定を行う
- メモリバンクに記述する文書はすべてJSON形式とし、Markdownは使用不可
- テストは選択的に実行し、E2Eテストはユーザーの明示的な指示がある場合のみ実行する

---
