{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "96b4110c-76e6-448a-b217-f037dcbfcfd9",
    "title": "アーキテクチャ決定記録",
    "documentType": "generic",
    "path": "architecture-decisions.md",
    "tags": [
      "architecture",
      "decision",
      "json",
      "version-2"
    ],
    "lastModified": "2025-03-17T02:13:31.716Z",
    "createdAt": "2025-03-17T02:13:31.716Z",
    "version": 1
  },
  "content": {
    "20_20250316": [
      "現在のMemory Bankはドキュメント保存形式としてMarkdownとJSONの両方をサポートしています。\nこれにより以下の問題が発生しています：\n1. 双方向変換ロジックの複雑さ（Markdown⇔JSON）\n2. 変換時の情報欠落リスク\n3. テストコードの肥大化\n4. マイナーアップデートの度に両方のフォーマットテストが必要\n5. スキーマの厳密な検証が難しい\n6. データベースへの将来的な移行が複雑になる\n**Memory Bank 2.0では、JSONを唯一のデータ保存形式とし、Markdownサポートを完全に廃止する。**\nこの決定により：",
      "データモデルをスキーマファーストで定義",
      "型安全性の向上",
      "検証プロセスの簡素化",
      "コードベースの軽量化",
      "将来の拡張性向上",
      "コードベースがシンプルになり、理解と保守が容易になる",
      "構造化データとしてクエリやフィルタリングが容易",
      "スキーマによる厳密な型チェックが可能",
      "テストが単純化され、カバレッジが向上",
      "将来的なデータベース（SurrealDB等）への移行パスが明確",
      "Markdownの人間可読性が失われる",
      "既存のMarkdownファイルを移行する必要がある",
      "エディタ、ビューワー等のツールが必要になる",
      "バージョン1.xと互換性がなくなる",
      "JSON→Markdown変換機能を別のレイヤー（表示レイヤー）として実装可能",
      "マイグレーションスクリプトによる既存ファイルの自動変換",
      "CLIツールの拡張でJSONの読み書きを支援",
      "明確な移行ガイドの提供"
    ]
  }
}