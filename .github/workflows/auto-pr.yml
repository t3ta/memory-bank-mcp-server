name: Auto Create PR

on:
  push:
    branches:
      - 'feature/**'
      - 'fix/**'
    paths:
      - 'docs/branch-memory-bank/**/pullRequest.md'  # このファイルが存在する場合にトリガー

# コンカレンシー制御 - 同じブランチで同時に実行されないようにする
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      # 適切な権限を明示的に設定
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Get branch name
        id: branch-name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Extract PR information from memory bank
        id: extract-pr-info
        run: |
          # Node.jsスクリプトを作成して、より堅牢な抽出処理を実現
          cat > extract-pr-info.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // ブランチ名からディレクトリ名を生成
          const branchName = process.env.BRANCH_NAME;
          const memoryBankDir = path.join('docs/branch-memory-bank', branchName.replace('/', '-'));
          
          console.log(`Extracting PR info from ${memoryBankDir}`);
          
          // 結果オブジェクト
          const result = {
            title: '',
            body: '# Overview\n\n',
            labels: ['auto-generated'],
          };
          
          // ファイルが存在するかチェックする関数
          function fileExists(filePath) {
            try {
              return fs.existsSync(filePath);
            } catch (err) {
              console.error(`Error checking if file exists: ${filePath}`, err);
              return false;
            }
          }
          
          // ファイルから指定されたセクションを抽出する関数
          function extractSection(filePath, sectionHeader, stopPattern = /^##/) {
            if (!fileExists(filePath)) return '';
            
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              const lines = content.split('\n');
              
              let capturing = false;
              let result = [];
              
              for (const line of lines) {
                if (line.match(sectionHeader)) {
                  capturing = true;
                  continue;
                }
                
                if (capturing) {
                  if (line.match(stopPattern) && !line.match(sectionHeader)) {
                    break;
                  }
                  
                  // 空行でなければ追加
                  if (line.trim()) {
                    result.push(line);
                  }
                }
              }
              
              return result.join('\n');
            } catch (err) {
              console.error(`Error extracting section from ${filePath}:`, err);
              return '';
            }
          }
          
          // pullRequest.mdからカスタム情報と言語を取得
          const prFilePath = path.join(memoryBankDir, 'pullRequest.md');
          let isEnglish = false;
          
          if (fileExists(prFilePath)) {
            try {
              const prContent = fs.readFileSync(prFilePath, 'utf8');
              
              // 言語の検出 (英語か日本語か)
              isEnglish = prContent.includes('# PR Ready') || 
                         prContent.includes('This PR was automatically generated');
              
              // 言語をログに出力 (デバッグ用)
              console.log(`Detected language: ${isEnglish ? 'English' : 'Japanese'}`);
              
              // セクションヘッダー - 英語と日本語の両方に対応
              const sectionHeaders = {
                en: {
                  currentWork: '## Current Work',
                  recentChanges: '## Recent Changes',
                  activeDecisions: '## Technical Decisions',
                  considerations: '## Considerations',
                  workingFeatures: '## Implemented Features',
                  knownIssues: '## Known Issues'
                },
                ja: {
                  currentWork: '## 現在の作業内容',
                  recentChanges: '## 変更内容',
                  activeDecisions: '## 技術的決定事項',
                  considerations: '## 検討事項',
                  workingFeatures: '## 実装済み機能',
                  knownIssues: '## 既知の問題'
                }
              };
              
              // 言語に基づいてセクションヘッダーを選択
              const headers = isEnglish ? sectionHeaders.en : sectionHeaders.ja;
              
              // branchContext.mdからプロジェクト目的を取得
              const branchContextPath = path.join(memoryBankDir, 'branchContext.md');
              
              // activeContext.mdから情報を取得
              const activeContextPath = path.join(memoryBankDir, 'activeContext.md');
              
              // #title:タグがあればタイトルを設定
              const titleMatch = prContent.match(/#title:\s*(.+)$/m);
              if (titleMatch) {
                result.title = titleMatch[1].trim();
                console.log(`Custom title specified: ${result.title}`);
              }
              
              // #targetBranch:タグがあれば抽出
              const targetBranchMatch = prContent.match(/#targetBranch:\s*([a-zA-Z0-9\/_-]+)/);
              if (targetBranchMatch) {
                process.env.TARGET_BRANCH = targetBranchMatch[1];
                console.log(`Custom target branch specified: ${process.env.TARGET_BRANCH}`);
              }
              
              // #reviewers:タグがあれば抽出
              const reviewersMatch = prContent.match(/#reviewers:\s*([a-zA-Z0-9\/_,\s-]+)/);
              if (reviewersMatch) {
                process.env.REVIEWERS = reviewersMatch[1].replace(/\s+/g, '');
                console.log(`Reviewers specified: ${process.env.REVIEWERS}`);
              }
              
              // #labels:タグがあれば抽出して既存のラベルに追加
              const labelsMatch = prContent.match(/#labels:\s*([a-zA-Z0-9\/_,\s-]+)/);
              if (labelsMatch) {
                const additionalLabels = labelsMatch[1].split(',').map(l => l.trim());
                result.labels.push(...additionalLabels);
                console.log(`Additional labels specified: ${additionalLabels.join(', ')}`);
              }
              
              // PR本文を抽出 - 最初のヘッダー（Overview/概要）の後から始める
              const bodyStartRegex = isEnglish ? /# Overview/ : /# 概要/;
              const bodyStartMatch = prContent.match(bodyStartRegex);
              
              if (bodyStartMatch) {
                // "#title:", "#targetBranch:", "#labels:", "#reviewers:"などのメタタグを除いた部分を抽出
                const metaEndPos = prContent.lastIndexOf('#', prContent.indexOf(bodyStartMatch[0]));
                if (metaEndPos !== -1) {
                  result.body = prContent.substring(prContent.indexOf(bodyStartMatch[0]));
                } else {
                  // メタタグがなければ本文全体を使用
                  result.body = prContent.substring(prContent.indexOf(bodyStartMatch[0]));
                }
              } else {
                // 本文部分が見つからない場合は、タグを除いた内容を追加情報として追加
                let additionalInfo = prContent
                  .replace(/#targetBranch:\s*([a-zA-Z0-9\/_-]+)/g, '')
                  .replace(/#reviewers:\s*([a-zA-Z0-9\/_,\s-]+)/g, '')
                  .replace(/#labels:\s*([a-zA-Z0-9\/_,\s-]+)/g, '')
                  .replace(/#title:\s*(.+)$/mg, '')
                  .trim();
                  
                if (additionalInfo) {
                  result.body += isEnglish 
                    ? `## Additional Information\n${additionalInfo}\n\n` 
                    : `## 追加情報\n${additionalInfo}\n\n`;
                }
              }
            } catch (err) {
              console.error(`Error processing pullRequest.md:`, err);
            }
          }
          
          // タイトルが設定されていなければフォールバックを使用
          if (!result.title) {
            // ブランチ名からタイトルを生成
            const type = branchName.startsWith('feature/') ? 'feat' : 'fix';
            const featureName = branchName.replace(/^(feature|fix)\//, '').replace(/-/g, ' ');
            result.title = `${type}: ${featureName}`;
          }
          
          // フッターを追加
          result.body += isEnglish 
            ? '\n---\n\n_This PR was automatically generated based on information from the memory bank_\n'
            : '\n---\n\n_このPRはメモリバンクの情報を基に自動生成されました_\n';
          
          // 環境変数にセット
          console.log(`PR Title: ${result.title}`);
          console.log(`Labels: ${result.labels.join(', ')}`);
          console.log('PR Body preview (first 300 chars):');
          console.log(result.body.substring(0, 300) + '...');
          
          // GitHub Actions用の環境変数をセット
          const fs_env = require('fs');
          fs_env.appendFileSync(process.env.GITHUB_ENV, `PR_TITLE=${result.title}\n`);
          fs_env.appendFileSync(process.env.GITHUB_ENV, `PR_LABELS=${result.labels.join(',')}\n`);
          fs_env.appendFileSync(process.env.GITHUB_ENV, 'PR_BODY<<EOF\n' + result.body + '\nEOF\n');
          
          // ターゲットブランチが指定されていない場合はデフォルト設定
          if (!process.env.TARGET_BRANCH) {
            // デフォルトでfeatureブランチはdevelopに、fixブランチはmasterにマージ
            const defaultTarget = branchName.startsWith('feature/') ? 'develop' : 'master';
            fs_env.appendFileSync(process.env.GITHUB_ENV, `TARGET_BRANCH=${defaultTarget}\n`);
          }
          EOF
          
          # Node.jsスクリプトを実行
          node extract-pr-info.js
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ラベルを準備
          LABEL_ARGS=""
          IFS=',' read -ra LABELS <<< "${{ env.PR_LABELS }}"
          for LABEL in "${LABELS[@]}"; do
            LABEL_ARGS="${LABEL_ARGS} --label \"${LABEL}\""
          done
          
          # レビュワーを準備（もし指定されていれば）
          REVIEWER_ARGS=""
          if [ ! -z "${{ env.REVIEWERS }}" ]; then
            IFS=',' read -ra REVIEWERS <<< "${{ env.REVIEWERS }}"
            for REVIEWER in "${REVIEWERS[@]}"; do
              REVIEWER_ARGS="${REVIEWER_ARGS} --reviewer \"${REVIEWER}\""
            done
          fi
          
          # PRを作成するコマンドを構築
          PR_CMD="gh pr create \
            --base \"${{ env.TARGET_BRANCH }}\" \
            --head \"${{ env.BRANCH_NAME }}\" \
            --title \"${{ env.PR_TITLE }}\" \
            --body \"${{ env.PR_BODY }}\" \
            ${LABEL_ARGS} \
            ${REVIEWER_ARGS}"
          
          # コマンドを実行
          eval ${PR_CMD}
          
          # 成功したら、pullRequest.mdを削除して再トリガーを防止
          if [ $? -eq 0 ]; then
            echo "Pull Request created successfully. Removing pullRequest.md trigger file..."
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git rm "docs/branch-memory-bank/${BRANCH_NAME/\//-}/pullRequest.md"
            git commit -m "chore: remove pullRequest.md after PR creation [skip ci]"
            git push
          else
            echo "Failed to create Pull Request. Please check the logs and try again."
            exit 1
          fi
      
      - name: PR Creation Result
        if: success()
        run: |
          echo "Pull Request created successfully!"
          echo "Title: ${{ env.PR_TITLE }}"
          echo "Target: ${{ env.TARGET_BRANCH }}"
          echo "See the Pull Requests tab in your repository for details."
