{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "8ba16cf1-aa38-437d-8d9f-0a44268a40e8",
    "title": "ドメインモデル",
    "documentType": "generic",
    "path": "domain-models.md",
    "tags": [
      "domain",
      "models",
      "architecture",
      "json",
      "document-model"
    ],
    "lastModified": "2025-03-17T02:13:31.719Z",
    "createdAt": "2025-03-17T02:13:31.719Z",
    "version": 1
  },
  "content": {
    "rawContent": "# ドメインモデル\n\ntags: #domain #models #architecture #json #document-model\n\n## コアモデル\n\n### MemoryDocument\n\nメモリバンクの中核となるドキュメントモデル。プロジェクトの知識を構造化されたドキュメントとして表現する。\n\n#### 主要属性\n- **path**: ドキュメントのパス (DocumentPath)\n- **content**: ドキュメントの内容\n- **tags**: ドキュメントに関連するタグのリスト\n- **lastModified**: 最終更新日時\n\n#### 保存形式\nドキュメントは以下の2つの形式で保存可能：\n\n1. **Markdown形式** (.md)\n   - 人間が読み書きしやすいテキスト形式\n   - タグはFrontmatter形式でドキュメント先頭に記述\n\n2. **JSON形式** (.json) - v1.1.0以降\n   - 構造化データとして保存\n   - メタデータとコンテンツを明示的に分離\n   - 基本構造:\n   ```json\n   {\n     \"schema\": \"memory_document_v1\",\n     \"metadata\": {\n       \"title\": \"ドキュメントタイトル\",\n       \"documentType\": \"ドキュメントタイプ\",\n       \"path\": \"パス/ファイル名\",\n       \"tags\": [\"タグ1\", \"タグ2\"],\n       \"lastModified\": \"2023-01-01T00:00:00.000Z\"\n     },\n     \"content\": {\n       // ドキュメントタイプ固有のコンテンツ\n     }\n   }\n   ```\n\n### DocumentPath\n\nドキュメントの場所を表す値オブジェクト。\n\n#### 主要属性\n- **value**: 正規化されたパス文字列\n- **directory**: パスのディレクトリ部分\n- **filename**: パスのファイル名部分\n- **extension**: ファイルの拡張子\n\n#### 拡張子による機能\n- **isMarkdown()**: .md拡張子を持つドキュメントかどうか\n- **isJSON()**: .json拡張子を持つドキュメントかどうか\n\n### Tag\n\nドキュメントの分類や関連付けに使用されるタグ。\n\n#### 主要属性\n- **value**: タグの値\n- **isHashtag**: ハッシュタグ形式かどうか\n\n## 関連性\n\n- **MemoryDocument** ↔ **DocumentPath**: 1対1の関係。各ドキュメントは一意のパスを持つ\n- **MemoryDocument** ↔ **Tag**: 1対多の関係。各ドキュメントは複数のタグを持つことができる\n\n## 技術的決定事項\n\n### JSONベースのドキュメント形式の導入 (2025-03-16)\n\n#### コンテキスト\nこれまでのメモリバンクはMarkdown形式でドキュメントを管理していたが、構造化データの管理や検索、フィルタリングが難しい課題があった。将来的なデータベース移行への道筋も考慮する必要があった。\n\n#### 決定事項\nJSON形式をプライマリな保存形式として採用し、Markdownをプレゼンテーション用として位置づけることにした。実装方針として：\n\n1. 最初はシンプルなJSON直読み方式から始める\n2. ドキュメントはメタデータとコンテンツを明示的に分離\n3. 各ドキュメントタイプごとに専用のコンテンツスキーマを定義\n4. Markdownとの関係は一方向（JSONからMarkdownを生成）とする\n5. 将来的なSurrealDB埋め込み版への移行を見据えた設計とする\n\n#### 影響\n- **ポジティブ**\n  - 構造化データとしての操作が容易になる\n  - タイプセーフなスキーマによる堅牢性向上\n  - 検索・フィルタリング機能の拡張が容易になる\n  - 将来的なデータベース移行への道筋ができる\n\n- **ネガティブ**\n  - 実装の複雑性が増加する\n  - JSONファイルの直接編集は人間にとって難しい\n  - マイグレーション作業が必要\n",
    "sections": {
      "": "### JSONベースのドキュメント形式の導入 (2025-03-16)\n\n#### コンテキスト\nこれまでのメモリバンクはMarkdown形式でドキュメントを管理していたが、構造化データの管理や検索、フィルタリングが難しい課題があった。将来的なデータベース移行への道筋も考慮する必要があった。\n\n#### 決定事項\nJSON形式をプライマリな保存形式として採用し、Markdownをプレゼンテーション用として位置づけることにした。実装方針として：\n\n1. 最初はシンプルなJSON直読み方式から始める\n2. ドキュメントはメタデータとコンテンツを明示的に分離\n3. 各ドキュメントタイプごとに専用のコンテンツスキーマを定義\n4. Markdownとの関係は一方向（JSONからMarkdownを生成）とする\n5. 将来的なSurrealDB埋め込み版への移行を見据えた設計とする\n\n#### 影響\n- **ポジティブ**\n- 構造化データとしての操作が容易になる\n- タイプセーフなスキーマによる堅牢性向上\n- 検索・フィルタリング機能の拡張が容易になる\n- 将来的なデータベース移行への道筋ができる\n\n- **ネガティブ**\n- 実装の複雑性が増加する\n- JSONファイルの直接編集は人間にとって難しい\n- マイグレーション作業が必要"
    }
  }
}