{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "auto-initialization-test",
    "title": "メモリバンク自動初期化機能のテスト計画",
    "documentType": "generic",
    "path": "auto-initialization-test.json",
    "tags": [
      "test",
      "auto-initialization",
      "memory-bank"
    ],
    "lastModified": "2025-03-22T01:50:00.000Z",
    "createdAt": "2025-03-22T01:50:00.000Z",
    "version": 1
  },
  "content": {
    "sections": [
      {
        "title": "テスト計画の概要",
        "content": "メモリバンク自動初期化機能の修正後、その動作を確認するためのユニットテストを作成します。"
      },
      {
        "title": "テストファイルの場所",
        "content": "tests/unit/application/usecases/common/ReadBranchCoreFilesUseCase.test.ts"
      },
      {
        "title": "テストケース1: 自動初期化成功",
        "content": "```typescript\nit('should auto-initialize branch if it does not exist', async () => {\n  // モックリポジトリの設定\n  const mockBranchRepository = {\n    exists: jest.fn().mockResolvedValue(false), // ブランチが存在しないと返す\n    initialize: jest.fn().mockResolvedValue(undefined), // 初期化成功\n    getDocument: jest.fn().mockResolvedValue(null), // ドキュメントは見つからない\n    listDocuments: jest.fn().mockResolvedValue([])\n  };\n\n  // テスト対象のユースケースを作成\n  const useCase = new ReadBranchCoreFilesUseCase(mockBranchRepository as any);\n\n  // 存在しないブランチ名で実行\n  const result = await useCase.execute({\n    branchName: 'feature/non-existent-branch'\n  });\n\n  // 期待される結果\n  expect(mockBranchRepository.exists).toHaveBeenCalledWith('feature/non-existent-branch');\n  expect(mockBranchRepository.initialize).toHaveBeenCalled(); // 初期化が呼ばれたことを確認\n  expect(result).toEqual({ files: { systemPatterns: { technicalDecisions: [] } } }); // 空の結果が返されることを確認\n});\n```"
      },
      {
        "title": "テストケース2: 自動初期化失敗",
        "content": "```typescript\nit('should throw error if branch auto-initialization fails', async () => {\n  // モックリポジトリの設定\n  const initError = new Error('Initialization failed');\n  const mockBranchRepository = {\n    exists: jest.fn().mockResolvedValue(false), // ブランチが存在しないと返す\n    initialize: jest.fn().mockRejectedValue(initError), // 初期化失敗\n    getDocument: jest.fn().mockResolvedValue(null),\n    listDocuments: jest.fn().mockResolvedValue([])\n  };\n\n  // テスト対象のユースケースを作成\n  const useCase = new ReadBranchCoreFilesUseCase(mockBranchRepository as any);\n\n  // 期待されるエラー\n  await expect(useCase.execute({\n    branchName: 'feature/non-existent-branch'\n  })).rejects.toThrow(DomainError); // DomainErrorがスローされることを確認\n\n  // 期待される呼び出し\n  expect(mockBranchRepository.exists).toHaveBeenCalledWith('feature/non-existent-branch');\n  expect(mockBranchRepository.initialize).toHaveBeenCalled(); // 初期化が呼ばれたことを確認\n});\n```"
      },
      {
        "title": "テスト実行方法",
        "content": "テストを実行するには、以下のコマンドを使用します：\n\n```bash\nnpm test -- -t \"ReadBranchCoreFilesUseCase\"\n```\n\nまたは、特定のテストケースのみを実行する場合：\n\n```bash\nnpm test -- -t \"should auto-initialize branch if it does not exist\"\n```"
      },
      {
        "title": "テスト結果の確認ポイント",
        "content": "1. 自動初期化成功のテスト:\n   - `exists`メソッドが正しいブランチ名で呼ばれたこと\n   - `initialize`メソッドが呼ばれたこと\n   - 期待される結果（空のファイルリスト）が返されること\n\n2. 自動初期化失敗のテスト:\n   - `DomainError`がスローされること\n   - `exists`メソッドが正しいブランチ名で呼ばれたこと\n   - `initialize`メソッドが呼ばれたこと"
      }
    ]
  }
}