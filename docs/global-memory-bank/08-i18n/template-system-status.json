{
  "schema": "memory_document_v1",
  "metadata": {
    "title": "template-system-status.json",
    "documentType": "generic",
    "path": "08-i18n/template-system-status.json",
    "tags": [],
    "lastModified": "2025-03-24T08:04:03.409Z"
  },
  "content": {
    "text": "{\n  \"schema\": \"memory_document_v2\",\n  \"metadata\": {\n    \"id\": \"template-system-status\",\n    \"title\": \"テンプレートシステムの現状と課題\",\n    \"documentType\": \"document\",\n    \"path\": \"08-i18n/template-system-status.json\",\n    \"tags\": [\n      \"i18n\",\n      \"templates\",\n      \"status\",\n      \"issues\"\n    ],\n    \"lastModified\": \"2025-03-24T08:03:29.000Z\",\n    \"createdAt\": \"2025-03-24T08:03:29.000Z\",\n    \"version\": 1\n  },\n  \"content\": {\n    \"sections\": [\n      {\n        \"id\": \"overview\",\n        \"title\": \"概要\",\n        \"content\": \"このドキュメントでは、Memory Bank MCPサーバーのテンプレートシステムの現状と課題について説明します。テンプレートシステムは、JSONベースの構造化されたテンプレートと多言語対応（i18n）の機能を提供していますが、いくつかの課題が残っています。\"\n      },\n      {\n        \"id\": \"current-implementation\",\n        \"title\": \"現在の実装状況\",\n        \"content\": \"### テンプレートシステムの基本設計\n\n現在のテンプレートシステムは、以下の原則に基づいて設計されています：\n\n1. **テンプレート構造とコンテンツの分離**\n   - テンプレート自体は言語に依存しない構造を持つ単一のJSONファイル\n   - 翻訳は別の言語ファイルに保存\n   - テンプレートは翻訳キーを参照し、実際のテキストは言語ファイルから取得\n\n2. **多言語対応（i18n）**\n   - 英語（en）、日本語（ja）、中国語（zh）の3言語をサポート\n   - 言語ファイルは `src/infrastructure/i18n/translations/` ディレクトリに配置\n   - 翻訳キーは階層的な命名規則に従う（例：`template.title.rules`）\n\n3. **テンプレートの構造**\n   - テンプレートはID、タイプ、バージョン、セクションなどの情報を持つ\n   - セクションはタイトルキー、コンテンツキー、オプション設定などを持つ\n   - 変数はプレースホルダーとして定義され、レンダリング時に置換される\"\n      },\n      {\n        \"id\": \"issues\",\n        \"title\": \"現在の課題\",\n        \"content\": \"### 実装上の問題\n\n1. **言語ごとのテンプレートファイル**\n   - 現在、言語ごとに別々のテンプレートファイル（rules-en.json, rules-ja.json, rules-zh.json）が存在\n   - これはテンプレートシステムの設計原則（構造とコンテンツの分離）に違反している\n   - 正しい実装では、単一のテンプレートファイル（rules.json）と言語ファイルの組み合わせを使用すべき\n\n2. **ReadRulesUseCaseの実装**\n   - 現在のReadRulesUseCaseは、テンプレートシステムを十分に活用していない\n   - 言語ごとのファイルを直接読み込む代わりに、テンプレートローダーを使用すべき\n\n3. **テンプレートIDの不一致**\n   - テンプレートファイルのIDとファイル名の不一致がある\n   - これにより、テンプレートの読み込みエラーが発生している\n\n4. **エラーハンドリングの不足**\n   - テンプレートや翻訳が見つからない場合のフォールバック処理が不十分\n   - より堅牢なエラーハンドリングが必要\"\n      },\n      {\n        \"id\": \"solutions\",\n        \"title\": \"解決策\",\n        \"content\": \"### 短期的な解決策\n\n1. **テンプレートファイルの統合**\n   - 言語ごとのテンプレートファイルを単一のテンプレートファイルに統合\n   - 翻訳キーを使用するように修正\n   - 言語ファイルに翻訳を追加\n\n2. **ReadRulesUseCaseの修正**\n   - テンプレートローダーを使用するように修正\n   - 適切なエラーハンドリングを追加\n\n3. **テンプレートIDの統一**\n   - テンプレートIDとファイル名の一貫性を確保\n   - テンプレートローダーの検証を強化\n\n### 長期的な解決策\n\n1. **テンプレートシステムの完全な再設計**\n   - より堅牢なテンプレートシステムの設計と実装\n   - スキーマベースの検証の導入\n   - より柔軟なテンプレート構造のサポート\n\n2. **テンプレート管理ツールの開発**\n   - テンプレートと翻訳の管理を容易にするツールの開発\n   - GUIベースのエディタの提供\n\n3. **自動テストの強化**\n   - テンプレートシステムのテストカバレッジの向上\n   - 多言語対応のテストの追加\"\n      },\n      {\n        \"id\": \"implementation-plan\",\n        \"title\": \"実装計画\",\n        \"content\": \"### フェーズ1：テンプレートファイルの統合\n\n1. 単一のテンプレートファイル（rules.json）を作成\n2. 翻訳キーを使用するように修正\n3. 言語ファイルに翻訳を追加\n\n### フェーズ2：ReadRulesUseCaseの修正\n\n1. テンプレートローダーを使用するように修正\n2. 適切なエラーハンドリングを追加\n3. テストを更新\n\n### フェーズ3：テンプレートシステムの改善\n\n1. テンプレートローダーの検証を強化\n2. エラーハンドリングの改善\n3. パフォーマンスの最適化\n\n### フェーズ4：ドキュメントの更新\n\n1. テンプレートシステムの使い方ガイドの更新\n2. 開発者向けドキュメントの更新\n3. サンプルの提供\"\n      },\n      {\n        \"id\": \"conclusion\",\n        \"title\": \"結論\",\n        \"content\": \"テンプレートシステムは、Memory Bank MCPサーバーの重要な機能の一つです。現在の実装にはいくつかの課題がありますが、これらの課題を解決することで、より堅牢で使いやすいテンプレートシステムを提供することができます。特に、テンプレート構造とコンテンツの分離という原則に従うことで、多言語対応の保守性と拡張性が向上します。\"\n      }\n    ]\n  }\n}"
  }
}