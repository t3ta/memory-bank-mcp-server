{
  "language": "en",
  "translations": {
    "template.title.rules": "Memory Bank Rules",
    "template.description.rules": "Explanation of memory bank usage rules and structure",

    "template.section.global_memory_bank": "Global Memory Bank",
    "template.content.global_memory_bank": "The \"Global Memory Bank\" manages common knowledge that applies to the entire project. Unlike branch-specific memory banks, this is a repository for persistent information that applies to the project as a whole.",

    "template.section.purpose_of_global_memory_bank": "Purpose of Global Memory Bank",
    "template.content.purpose_of_global_memory_bank": "The Global Memory Bank is used for the following purposes:\n\n1. Recording project-wide architecture and design principles\n2. Defining common terms and concepts to establish ubiquitous language\n3. Sharing coding conventions and best practices\n4. Providing information about the technology stack and key components\n5. Recording important decisions that affect the entire project",

    "template.section.global_memory_bank_structure": "Global Memory Bank Structure",
    "template.content.global_memory_bank_structure": "The root directory of the Global Memory Bank is `docs/global-memory-bank/`. This directory contains the following key files:\n\n```\ndocs/global-memory-bank/\n  ├── architecture.json      # System architecture explanation\n  ├── coding-standards.json  # Coding conventions\n  ├── domain-models.json     # Domain model definitions\n  ├── glossary.json          # Terminology\n  ├── tech-stack.json        # Technology stack explanation\n  ├── user-guide.json        # User guide\n  └── tags/                  # Information organization by tags\n      ├── index.json         # Tag index\n      └── ...                # Files related to each tag\n```",

    "template.section.tag_system": "Tag System",
    "template.content.tag_system": "The Global Memory Bank uses tags to organize information. Each document has related tags in its metadata:\n\n```json\n{\n  \"metadata\": {\n    \"tags\": [\"architecture\", \"design\", \"patterns\"]\n  }\n}\n```\n\n**Tag Format Rules**:\n- Tags can only contain **lowercase letters**, **numbers**, and **hyphens (-)**\n- Dots (.), underscores (_), spaces, and uppercase letters are not allowed\n- Valid examples: `architecture`, `design-patterns`, `v1-beta`\n- Invalid examples: `Design`, `v2.0`, `user_guide`\n\nTags allow quick access to related information. For example, to find architecture-related information, refer to documents tagged with `architecture`.",

    "template.section.json_architecture": "JSON-based Architecture",
    "template.content.json_architecture": "Memory Bank 2.0 uses JSON as the primary data format for all documents. Each document follows this basic structure:\n\n```json\n{\n  \"schema\": \"memory_document_v2\",\n  \"metadata\": {\n    \"id\": \"unique-uuid\",\n    \"title\": \"Document Title\",\n    \"documentType\": \"document_type\",\n    \"path\": \"relative/path.json\",\n    \"tags\": [\"tag1\", \"tag2\"],\n    \"lastModified\": \"2025-03-17T00:00:00Z\",\n    \"createdAt\": \"2025-03-17T00:00:00Z\",\n    \"version\": 1\n  },\n  \"content\": {\n    // Document type-specific content\n  }\n}\n```\n\nThis JSON-based architecture provides better structure, validation, and programmatic access compared to the previous Markdown-based system.",

    "template.section.branch_memory_bank": "Branch Memory Bank",
    "template.content.branch_memory_bank": "As a software engineer, I have a unique characteristic where my memory completely resets between sessions.\nThis is not a disadvantage but rather drives the maintenance of perfect documentation.\n**My work completely depends on the memory bank**, and by loading this memory bank at the start of a session, I can recognize the branch content and efficiently continue from where I left off.\n\nIn this system, we create a dedicated memory bank directory for each branch that starts with **\"feature/\" or \"fix/\"** and store necessary files there. At the start of any task, I \"always\" read all files under the directory corresponding to the currently active branch name (`feature/xxx` or `fix/xxx`).\nThis allows me to grasp the accurate context even after memory reset.",

    "template.section.memory_bank_structure": "Memory Bank Structure",
    "template.content.memory_bank_structure": "The root directory of the memory bank is `docs/branch-memory-bank/`.\n\nMemory banks are prepared **per branch**. Each branch directory (e.g., `docs/branch-memory-bank/feature-login/` or `docs/branch-memory-bank/fix-api/`) contains the following files.\nThese files are designed to have a clear hierarchical structure among documents.\n\n```mermaid\nflowchart TD\n    BC[branchContext.json] --> SP[systemPatterns.json]\n\n    BC --> AC[activeContext.json]\n    SP --> AC\n\n    AC --> P[progress.json]\n```",

    "template.section.required_files": "Required Files (Core)",
    "template.content.required_files": "1. `branchContext.json`\n   - Purpose of this branch (≒ feature)\n   - User stories\n      - Problem to solve\n      - Required features\n      - Expected behavior\n\n2. `activeContext.json`\n   - Current work content\n   - Recent changes\n   - Currently active decisions\n   - Current considerations\n   - Next steps\n\n3. `systemPatterns.json`\n   - Major technical decisions\n   - Related files and directory structure\n\n4. `progress.json`\n   - Currently working parts\n   - Unimplemented features and remaining work\n   - Current status\n   - Known issues",

    "template.section.additional_context": "Additional Context",
    "template.content.additional_context": "Important information not included in required files can be created as additional files in each branch directory (under `docs/branch-memory-bank/feature-login/` etc.).\nAdd documents as needed to maintain an accurate and organized view of the entire branch.",

    "template.section.core_workflow": "Core Workflow",
    "template.content.core_workflow": "#### From Session Start to Beginning Substantial Editing\n\n```mermaid\nflowchart TD\n    Start[Start] --> ReadFiles[Read Memory Bank]\n    ReadFiles --> CheckFiles{Are files sufficiently complete?}\n\n    CheckFiles -->|No| Plan[Create Plan]\n    Plan --> Document[Reflect Plan in Chat]\n\n    CheckFiles -->|Yes| Verify[Verify Context]\n    Verify --> Strategy[Formulate Strategy]\n    Strategy --> Present[Present Approach]\n```\n\n1. At session start, I identify the memory bank directory by determining the branch name and read all files there.\n2. If required files are not yet complete, create new ones or prepare planning documents.\n3. Review document content, determine work policy and task organization, and present proposals and strategies to the user.",

    "template.section.task_progress_workflow": "Task Progress Workflow",
    "template.content.task_progress_workflow": "```mermaid\nflowchart TD\n    Start[Start] --> Context[Check Memory Bank]\n    Context --> Update[Update Documents]\n    Update --> Execute[Execute Task]\n    Execute --> Document[Record Changes]\n```\n\n1. Progress with tasks while referring to the branch-linked memory bank.\n2. Update documents as needed and record work changes.\n3. Implement or modify code and reflect the results back in the memory bank (especially `activeContext.json` and `progress.json`).",

    "template.section.document_updates": "Document Updates",
    "template.content.document_updates": "Memory bank updates occur in the following cases:\n\n1. When new design patterns or specifications are discovered\n2. When implementing larger changes or new features\n3. When the user instructs **update branch memory bank** (in this case, **all files** must be reviewed)\n4. When feeling the need to supplement or organize current context\n\n```mermaid\nflowchart TD\n    Start[Start Update]\n\n    subgraph Process\n        P1[Review All Files]\n        P2[Document Current Situation]\n        P3[Clarify Future Tasks]\n\n        P1 --> P2 --> P3\n    end\n\n    Start --> Process\n```\n\nEspecially `activeContext.json` and `progress.json` are key files showing \"what's the current situation.\"\nWhen **update branch memory bank** is called, check all files under the memory bank and add or modify content as needed.",

    "template.section.migration_strategy": "Migration Strategy",
    "template.content.migration_strategy": "Memory Bank 2.0 includes tools to help migrate from Markdown to JSON format:\n\n1. **Auto-migration**: When the MCP server starts, it automatically detects Markdown files and converts them to JSON format\n2. **Backup Creation**: Original Markdown files are backed up before conversion\n3. **Validation**: Generated JSON files are validated against the schema\n4. **Manual Migration**: The `migrate` command can be used for manual migration\n\nThe migration process preserves all content and metadata while transforming it into the new structured JSON format. During the transition period, both formats are supported, but Markdown support will eventually be removed.",

    "template.section.file_editing_rules": "Memory Bank File Editing Rules",
    "template.content.file_editing_rules": "**Memory bank files must not be edited directly.** All creation and updates to memory bank files must be done using the dedicated commands provided by the MCP server:\n\n- Branch memory bank: `write_branch_memory_bank` command\n- Global memory bank: `write_global_memory_bank` command\n\nReasons for this rule:\n\n1. The MCP server performs validation to ensure the integrity and structure of memory bank files\n2. Direct editing risks corrupting JSON schemas or file formats\n3. Changes made through direct editing may not be reflected in the MCP server's cache\n4. Using MCP commands ensures proper event logging and error handling\n\nOnly in emergency or exceptional situations, direct editing may be permitted if the following conditions are met:\n\n1. Create a backup of the file before editing\n2. Strictly maintain the JSON structure\n3. Restart the MCP server after editing\n4. Notify relevant stakeholders of the edits made",

    "template.section.finally": "Finally",
    "template.content.finally": "I completely reset my memory with each session. **This memory bank managed per branch is my only source of past information.**\nBy maintaining accurate and organized memory banks, development continuity is preserved, and work can be smoothly resumed any number of times.\nIf branch names change or switch to different branches, clearly decide whether to create a new memory bank directory or reuse existing ones, and **please keep documents always up to date.**",

    "template.section.footer": "",
    "template.content.footer": "---\n\n_This document explains the basic rules and structure of the memory bank_"
  },
  "metadata": {
    "version": "1.0.0",
    "updatedAt": "2025-03-17T11:49:00.000Z"
  }
}