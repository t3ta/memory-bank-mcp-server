{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "5f93329b-ef6a-47b2-9b99-37639d51091f",
    "title": "JSONドキュメントスキーマ",
    "documentType": "generic",
    "path": "json-schema-as-markdown.md",
    "tags": [],
    "lastModified": "2025-03-21T19:30:40.793Z",
    "createdAt": "2025-03-21T19:30:40.793Z",
    "version": 1
  },
  "content": {
    "rawContent": "---\nschema: memory_document_v2\nmetadata:\n  id: json-document-schema\n  title: JSONドキュメントスキーマ\n  documentType: schema\n  path: schemas/json-document.md\n  tags:\n    - schema\n    - json\n    - documentation\n  lastModified: 2025-03-21T14:48:00Z\n  createdAt: 2025-03-21T14:48:00Z\n  version: 1\n---\n\n# JSONドキュメントスキーマ\n\nこのドキュメントでは、メモリバンクで使用されるJSONドキュメントのスキーマ定義について説明します。\n\n## 基本構造\n\nメモリバンクのJSONドキュメントは以下の基本構造に従います：\n\n```typescript\n{\n  schema: \"memory_document_v2\",\n  metadata: {\n    id: string,\n    title: string,\n    documentType: string,\n    path: string,\n    tags: string[],\n    lastModified: string, // ISO 8601形式の日時\n    createdAt: string,    // ISO 8601形式の日時\n    version: number\n  },\n  content: {\n    // ドキュメントタイプに応じた内容\n  }\n}\n```\n\n## メタデータスキーマ\n\nすべてのドキュメントタイプに共通するメタデータのスキーマ定義：\n\n```typescript\nconst DocumentMetadataSchema = z.object({\n  title: z.string().min(1, 'Title cannot be empty'),\n  documentType: z.string().min(1, 'Document type cannot be empty'),\n  path: z.string().min(1, 'Path cannot be empty'),\n  tags: z.array(TagSchema).default([]),\n  lastModified: FlexibleDateSchema,\n});\n```\n\nタグは以下のスキーマに従います：\n\n```typescript\nconst TagSchema = z.string().regex(\n  /^[a-z0-9-]+$/,\n  'Tags must contain only lowercase letters, numbers, and hyphens'\n);\n```\n\n## ドキュメントタイプ\n\nメモリバンクでは以下のドキュメントタイプが定義されています：\n\n### 1. ブランチコンテキスト (branch_context)\n\nブランチの目的や背景情報を記録するドキュメント。\n\n```mermaid\nclassDiagram\n  class BranchContextContent {\n    +string purpose\n    +Date createdAt\n    +UserStory[] userStories\n  }\n\n  class UserStory {\n    +string description\n    +boolean completed\n  }\n\n  BranchContextContent --> UserStory : contains\n```\n\nスキーマ定義：\n\n```typescript\nconst BranchContextContentSchema = z.object({\n  purpose: z.string(),\n  createdAt: FlexibleDateSchema,\n  userStories: z\n    .array(\n      z.object({\n        description: z.string(),\n        completed: z.boolean().default(false),\n      })\n    )\n    .default([]),\n});\n```\n\n### 2. アクティブコンテキスト (active_context)\n\n現在の作業内容や直近の変更点を記録するドキュメント。\n\n```mermaid\nclassDiagram\n  class ActiveContextContent {\n    +string? currentWork\n    +string[] recentChanges\n    +string[] activeDecisions\n    +string[] considerations\n    +string[] nextSteps\n  }\n```\n\nスキーマ定義：\n\n```typescript\nconst ActiveContextContentSchema = z.object({\n  currentWork: z.string().optional(),\n  recentChanges: z.array(z.string()).default([]),\n  activeDecisions: z.array(z.string()).default([]),\n  considerations: z.array(z.string()).default([]),\n  nextSteps: z.array(z.string()).default([]),\n});\n```\n\n### 3. 進捗状況 (progress)\n\n機能の実装状況や既知の問題点を記録するドキュメント。\n\n```mermaid\nclassDiagram\n  class ProgressContent {\n    +string[] workingFeatures\n    +string[] pendingImplementation\n    +string? status\n    +string[] knownIssues\n  }\n```\n\nスキーマ定義：\n\n```typescript\nconst ProgressContentSchema = z.object({\n  workingFeatures: z.array(z.string()).default([]),\n  pendingImplementation: z.array(z.string()).default([]),\n  status: z.string().optional(),\n  knownIssues: z.array(z.string()).default([]),\n});\n```\n\n### 4. システムパターン (system_patterns)\n\n技術的な判断や設計パターンを記録するドキュメント。\n\n```mermaid\nclassDiagram\n  class SystemPatternsContent {\n    +TechnicalDecision[] technicalDecisions\n  }\n\n  class TechnicalDecision {\n    +string title\n    +string context\n    +string decision\n    +string[] consequences\n  }\n\n  SystemPatternsContent --> TechnicalDecision : contains\n```\n\nスキーマ定義：\n\n```typescript\nconst TechnicalDecisionContentSchema = z.object({\n  title: z.string(),\n  context: z.string(),\n  decision: z.string(),\n  consequences: z.array(z.string()),\n});\n\nconst SystemPatternsContentSchema = z.object({\n  technicalDecisions: z.array(TechnicalDecisionContentSchema).default([]),\n});\n```\n\n## 使用例\n\n### ブランチコンテキストの例\n\n```json\n{\n  \"schema\": \"memory_document_v2\",\n  \"metadata\": {\n    \"id\": \"feature-yaml-migration\",\n    \"title\": \"YAMLへの移行機能\",\n    \"documentType\": \"branch_context\",\n    \"path\": \"branchContext.json\",\n    \"tags\": [\"yaml\", \"migration\", \"feature\"],\n    \"lastModified\": \"2025-03-21T14:30:00Z\",\n    \"createdAt\": \"2025-03-21T14:30:00Z\",\n    \"version\": 1\n  },\n  \"content\": {\n    \"purpose\": \"JSONからYAMLへの移行機能を実装する\",\n    \"createdAt\": \"2025-03-21T14:30:00Z\",\n    \"userStories\": [\n      {\n        \"description\": \"ユーザーはJSONファイルをYAMLに変換できる\",\n        \"completed\": false\n      },\n      {\n        \"description\": \"システムはYAMLファイルを読み込んで処理できる\",\n        \"completed\": false\n      }\n    ]\n  }\n}\n```\n\n### アクティブコンテキストの例\n\n```json\n{\n  \"schema\": \"memory_document_v2\",\n  \"metadata\": {\n    \"id\": \"active-context-yaml\",\n    \"title\": \"YAML移行の現在の作業\",\n    \"documentType\": \"active_context\",\n    \"path\": \"activeContext.json\",\n    \"tags\": [\"yaml\", \"active\", \"work\"],\n    \"lastModified\": \"2025-03-21T14:35:00Z\",\n    \"createdAt\": \"2025-03-21T14:30:00Z\",\n    \"version\": 1\n  },\n  \"content\": {\n    \"currentWork\": \"YAMLパーサーの実装\",\n    \"recentChanges\": [\n      \"js-yamlパッケージの追加\",\n      \"基本的なYAML読み込み機能の実装\"\n    ],\n    \"activeDecisions\": [\n      \"YAMLファイルの拡張子は.yamlを使用する\"\n    ],\n    \"considerations\": [\n      \"YAMLとJSONの互換性をどう維持するか\"\n    ],\n    \"nextSteps\": [\n      \"YAMLへの書き込み機能の実装\",\n      \"変換ユーティリティの作成\"\n    ]\n  }\n}\n```\n\n## スキーマ検証\n\nZodを使用してJSONドキュメントを検証する方法：\n\n```typescript\n// ドキュメントの検証\nconst validateDocument = (document: unknown): boolean => {\n  try {\n    JsonDocumentSchema.parse(document);\n    return true;\n  } catch (error) {\n    console.error('Validation error:', error);\n    return false;\n  }\n};\n```\n\n## 拡張と移行\n\n新しいドキュメントタイプを追加する場合は、以下の手順に従います：\n\n1. 新しいコンテンツスキーマを定義\n2. `JsonDocumentSchema`の判別共用体に新しいタイプを追加\n3. 型定義をエクスポート\n\nYAMLへの移行を行う場合は、JSONスキーマをそのまま使用できます。YAMLはJSONのスーパーセットであるため、同じ構造を維持したまま移行が可能です。\n\n## 注意事項\n\n- 日付はISO 8601形式（`YYYY-MM-DDTHH:mm:ss.sssZ`）で保存してください\n- タグは小文字のアルファベット、数字、ハイフンのみを使用してください\n- ドキュメントタイプは既存の定義されたタイプを使用してください\n",
    "sections": {
      "main": "---\nschema: memory_document_v2\nmetadata:\nid: json-document-schema\ntitle: JSONドキュメントスキーマ\ndocumentType: schema\npath: schemas/json-document.md\n- schema\n- json\n- documentation\nlastModified: 2025-03-21T14:48:00Z\ncreatedAt: 2025-03-21T14:48:00Z\nversion: 1\n---\n\n\nこのドキュメントでは、メモリバンクで使用されるJSONドキュメントのスキーマ定義について説明します。",
      "": "- 日付はISO 8601形式（`YYYY-MM-DDTHH:mm:ss.sssZ`）で保存してください\n- タグは小文字のアルファベット、数字、ハイフンのみを使用してください\n- ドキュメントタイプは既存の定義されたタイプを使用してください"
    }
  }
}