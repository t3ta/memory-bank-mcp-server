{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "e2e-test-implementation-next-steps",
    "title": "統合APIコントローラーE2Eテスト - 次のステップ",
    "documentType": "implementation_plan",
    "path": "e2e-test-implementation-next-steps.json",
    "tags": [],
    "createdAt": "2025-04-11T17:05:00.000Z",
    "lastModified": "2025-04-10T17:01:39.986Z"
  },
  "content": {
    "summary": "統合APIコントローラーのE2Eテスト実装の次のステップを定義するドキュメントです。",
    "sections": [
      {
        "title": "直近の作業（PR前）",
        "content": "1. **read_document.e2e.test.tsの完成** ✅\n   - 現在の直接APIアクセス方式で残りのテストケースを完成させる\n   - Branch/Globalの両方のスコープの基本的な読み書き機能を確認\n   - エラーケースのテストを追加\n\n2. **document-tools.tsの修正** ✅\n   - DIContainerから直接依存関係を取得するように変更\n   - アプリケーションインスタンスを正しく取得する方法の実装\n\n3. **ファイル操作のトラブルシューティング**\n   - 正しいパスとディレクトリ構造でファイルが生成されるか確認\n   - ディレクトリ権限やパス解決の問題がないか確認\n\n4. **テストケースの変更** ✅\n   - 例外を投げる代わりにエラーオブジェクトを返す実装に合わせてテストを変更\n   - エラーメッセージ確認に`.rejects.toThrow()`を使わず、`expect(result.success).toBe(false)`のように変更"
      },
      {
        "title": "中期的な改善点（次のイテレーション）",
        "content": "1. **MCPコマンド登録の実装**\n   - `routes.ts`ファイルに`write_document`と`read_document`コマンドを登録\n   - `AVAILABLE_TOOLS`定数に新しいコマンドの定義を追加\n\n2. **document-tools.tsの改善**\n   - アプリケーションインスタンスを正しく取得する方法の実装\n   - エラーハンドリングの強化\n   - 適切なログ出力の追加\n\n3. **クライアント側テストの整備**\n   - SDKクライアント経由でのE2Eテストの実装\n   - MCPInMemoryClientの機能拡張\n\n4. **既存テストの統合**\n   - `unified-document-commands.e2e.test.ts`の修正と有効化\n   - テスト中の重複の排除"
      },
      {
        "title": "テスト戦略の提案",
        "content": "## 複数レベルのテスト戦略\n\n今回の経験から、複数レベルのテスト戦略が有効と考えられます：\n\n1. **単体テスト**\n   - 各コンポーネント（コントローラー、ユースケース、リポジトリ）の個別テスト\n   - モックを使用して依存関係を分離\n\n2. **統合テスト**\n   - コンポーネント間の連携を検証\n   - 実際のデータストアとの相互作用を検証\n\n3. **APIレベルE2Eテスト**（今回実装）\n   - 公開APIを直接呼び出すテスト\n   - アプリケーションのコントローラーを直接使用\n   - ファイルシステムの変更を検証\n\n4. **クライアントレベルE2Eテスト**（将来実装）\n   - SDKクライアント経由での呼び出し\n   - MCPプロトコルの検証も含む\n   - 実際のユーザー体験に近い形でのテスト\n\nこの多層テスト戦略により、機能の正確性と信頼性を様々な角度から確保できます。"
      },
      {
        "title": "今後の技術的課題",
        "content": "## 解決すべき技術的課題\n\n1. **依存性注入の改善**\n   - グローバルなDIコンテナアクセスの仕組みを実装\n   - または、コマンド実装時に依存関係を明示的に渡す方法の標準化\n\n2. **テスト環境の標準化**\n   - 様々なテストレベルで再利用できるテスト環境セットアップの標準化\n   - テストデータ生成の自動化\n\n3. **MCPプロトコルのテスト容易性**\n   - プロトコルレベルのモックやスタブの整備\n   - テスト用のMCPクライアント/サーバーの簡易実装\n\n4. **テストカバレッジの可視化**\n   - 各レベルのテストカバレッジを統合して可視化\n   - 未カバーの部分を特定しやすくする"
      },
      {
        "title": "完了チェックリスト",
        "content": "## 完了チェックリスト\n- [x] write_document.e2e.test.tsのエラーハンドリング修正\n- [x] read_document.e2e.test.tsの実装完了\n- [x] document-tools.tsのDI問題修正\n- [ ] テスト実行と結果の確認\n- [ ] 書き込みと読み取りのファイル操作問題の解決\n- [ ] 既存のunified-document-commands.e2e.test.tsの処理決定（削除または有効化）\n- [ ] CIでのテスト実行確認\n- [x] メモリバンクドキュメントの更新\n- [ ] ESLintエラーのチェック（新たなエラーを増やさないこと）\n- [ ] PRの作成準備"
      }
    ]
  }
}