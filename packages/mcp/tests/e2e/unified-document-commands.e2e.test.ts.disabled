import { setupE2ETestEnv } from './helpers/e2e-test-env.js';
import type { Application } from '../../src/main/Application.js';
import type { MCPInMemoryClient } from './helpers/MCPInMemoryClient.js';
import type { DocumentDTO } from '../../src/application/dtos/DocumentDTO.js';

describe('MCP E2E Unified Document Commands Tests', () => {
  let app: Application;
  let client: MCPInMemoryClient;
  let cleanup: () => Promise<void>;

  const testBranchName = 'feature/e2e-unified-commands-test';
  const testDocPath = 'test-unified-doc.json';
  const initialDocContent = {
    schema: 'memory_document_v2',
    documentType: 'test',
    metadata: {
      id: 'unified-test-1',
      title: 'Unified Commands Test Doc',
      path: testDocPath,
      tags: ['initial', 'unified-test'],
      version: 1,
    },
    content: { message: 'Initial content for unified commands test' },
  };
  const initialDocContentString = JSON.stringify(initialDocContent, null, 2);

  beforeEach(async () => {
    const setup = await setupE2ETestEnv();
    app = setup.app;
    client = setup.client;
    cleanup = setup.cleanup;
  });

  afterEach(async () => {
    await cleanup();
  });

  describe('write_document command', () => {
    it('should write document to branch memory bank', async () => {
      // Act
      const result = await client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        content: initialDocContent,
        tags: initialDocContent.metadata.tags,
        docs: 'docs', // This should be relative to test env
      });

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data).toBeDefined();
      expect(result.data.path).toBe(testDocPath);

      // Verify content is actually written by reading it
      const branchController = app.getBranchController();
      const readResult = await branchController.readDocument(
        testBranchName, 
        testDocPath
      );
      expect(readResult.success).toBe(true);
      if (readResult.success) {
        expect(readResult.data).toBeDefined();
        if (!readResult.data) return fail('readResult.data should not be null');

        const document = (readResult.data as any).document as DocumentDTO;
        expect(document.path).toBe(testDocPath);
        expect(document.tags).toEqual(expect.arrayContaining(['initial', 'unified-test']));
        const parsedContent = document.content as any;
        expect(parsedContent.content.message).toBe('Initial content for unified commands test');
      } else {
        fail('readDocument should return success: true');
      }
    });

    it('should write document to global memory bank', async () => {
      // Arrange
      const globalDocPath = 'core/global-unified-doc.json';
      const globalDocContent = {
        schema: 'memory_document_v2',
        documentType: 'test',
        metadata: {
          id: 'global-unified-test',
          title: 'Global Unified Test Doc',
          path: globalDocPath,
          tags: ['global', 'unified-test'],
          version: 1,
        },
        content: { message: 'Global content for unified commands test' },
      };

      // Act
      const result = await client.callTool('write_document', {
        scope: 'global',
        path: globalDocPath,
        content: globalDocContent,
        tags: globalDocContent.metadata.tags,
        docs: 'docs',
      });

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data).toBeDefined();
      expect(result.data.path).toBe(globalDocPath);

      // Verify content is actually written by reading it
      const globalController = app.getGlobalController();
      const readResult = await globalController.readDocument(globalDocPath);
      expect(readResult.success).toBe(true);
      if (readResult.success) {
        expect(readResult.data).toBeDefined();
        if (!readResult.data) return fail('readResult.data should not be null');

        const document = (readResult.data as any).document as DocumentDTO;
        expect(document.path).toBe(globalDocPath);
        expect(document.tags).toEqual(expect.arrayContaining(['global', 'unified-test']));
        const parsedContent = document.content as any;
        expect(parsedContent.content.message).toBe('Global content for unified commands test');
      } else {
        fail('readDocument should return success: true');
      }
    });

    it('should update document using patches', async () => {
      // Arrange - First create a document
      await client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        content: initialDocContent,
        tags: initialDocContent.metadata.tags,
        docs: 'docs',
      });

      // Define patches
      const patches = [
        { op: 'replace', path: '/content/message', value: 'Updated with patches via unified command' },
        { op: 'add', path: '/content/newField', value: 'added via patch' },
      ];

      // Act - Update with patches
      const result = await client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        patches: patches,
        tags: [...initialDocContent.metadata.tags, 'patched'],
        docs: 'docs',
      });

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);

      // Verify patches were applied
      const branchController = app.getBranchController();
      const readResult = await branchController.readDocument(
        testBranchName, 
        testDocPath
      );
      expect(readResult.success).toBe(true);
      if (readResult.success) {
        expect(readResult.data).toBeDefined();
        if (!readResult.data) return fail('readResult.data should not be null');

        const document = (readResult.data as any).document as DocumentDTO;
        expect(document.tags).toEqual(expect.arrayContaining(['initial', 'unified-test', 'patched']));
        const parsedContent = document.content as any;
        expect(parsedContent.content.message).toBe('Updated with patches via unified command');
        expect(parsedContent.content.newField).toBe('added via patch');
      } else {
        fail('readDocument should return success: true');
      }
    });

    it('should return content when returnContent is true', async () => {
      // Act
      const result = await client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        content: initialDocContent,
        tags: initialDocContent.metadata.tags,
        docs: 'docs',
        returnContent: true
      });

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data).toBeDefined();
      expect(result.data.path).toBe(testDocPath);
      expect(result.data.content).toBeDefined();
      expect(result.data.tags).toEqual(expect.arrayContaining(['initial', 'unified-test']));

      // Parse the returned content and verify
      const returnedContent = JSON.parse(result.data.content);
      expect(returnedContent.content.message).toBe('Initial content for unified commands test');
    });

    it('should fail when neither content nor patches are provided', async () => {
      // Act & Assert
      await expect(client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: 'missing-data-doc.json',
        docs: 'docs',
      })).rejects.toThrow(/content.*patches/i);
    });

    it('should fail when both content and patches are provided', async () => {
      // Arrange
      const patches = [{ op: 'replace', path: '/content/message', value: 'test' }];

      // Act & Assert
      await expect(client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        content: initialDocContent,
        patches: patches,
        docs: 'docs',
      })).rejects.toThrow(/Cannot provide both/i);
    });
  });

  describe('read_document command', () => {
    beforeEach(async () => {
      // Set up test documents
      await client.callTool('write_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        content: initialDocContent,
        tags: initialDocContent.metadata.tags,
        docs: 'docs',
      });

      const globalDocPath = 'core/global-unified-doc.json';
      const globalDocContent = {
        schema: 'memory_document_v2',
        documentType: 'test',
        metadata: {
          id: 'global-unified-test',
          title: 'Global Unified Test Doc',
          path: globalDocPath,
          tags: ['global', 'unified-test'],
          version: 1,
        },
        content: { message: 'Global content for unified commands test' },
      };
      
      await client.callTool('write_document', {
        scope: 'global',
        path: globalDocPath,
        content: globalDocContent,
        tags: globalDocContent.metadata.tags,
        docs: 'docs',
      });
    });

    it('should read document from branch memory bank', async () => {
      // Act
      const result = await client.callTool('read_document', {
        scope: 'branch',
        branch: testBranchName,
        path: testDocPath,
        docs: 'docs',
      });

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data).toBeDefined();
      expect(result.data.path).toBe(testDocPath);
      expect(result.data.content).toBeDefined();
      expect(result.data.tags).toEqual(expect.arrayContaining(['initial', 'unified-test']));

      // Verify content
      const content = result.data.content;
      expect(content.schema).toBe('memory_document_v2');
      expect(content.documentType).toBe('test');
      expect(content.content.message).toBe('Initial content for unified commands test');
    });

    it('should read document from global memory bank', async () => {
      // Act
      const globalDocPath = 'core/global-unified-doc.json';
      const result = await client.callTool('read_document', {
        scope: 'global',
        path: globalDocPath,
        docs: 'docs',
      });

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data).toBeDefined();
      expect(result.data.path).toBe(globalDocPath);
      expect(result.data.content).toBeDefined();
      expect(result.data.tags).toEqual(expect.arrayContaining(['global', 'unified-test']));

      // Verify content
      const content = result.data.content;
      expect(content.schema).toBe('memory_document_v2');
      expect(content.documentType).toBe('test');
      expect(content.content.message).toBe('Global content for unified commands test');
    });

    it('should fail when reading non-existent document', async () => {
      // Act & Assert
      await expect(client.callTool('read_document', {
        scope: 'branch',
        branch: testBranchName,
        path: 'non-existent-document.json',
        docs: 'docs',
      })).rejects.toThrow(/not found/i);
    });

    it('should fail when scope is invalid', async () => {
      // Act & Assert
      await expect(client.callTool('read_document', {
        // @ts-ignore - Testing invalid scope
        scope: 'invalid-scope',
        branch: testBranchName,
        path: testDocPath,
        docs: 'docs',
      })).rejects.toThrow(/Invalid scope/i);
    });

    it('should auto-detect branch in project mode', async () => {
      // The test environment should already be in project mode
      // This test is more of a placeholder since we don't have a way to access the current branch in the test environment
      // In a real environment, the current branch would be detected from Git

      // This test checks that we can call read_document without specifying a branch
      // But since this is a test environment, we'd need to mock the Git service
      // For now, we'll check that an error is thrown since there's likely no branch detected

      // An implementation that properly tests this would require setting up the Git service
      // to return a specific branch when getCurrentBranchName is called

      try {
        await client.callTool('read_document', {
          scope: 'branch',
          // No branch specified - should be auto-detected in project mode
          path: testDocPath,
          docs: 'docs',
        });
        
        // If we got here, it might be working with auto-detection
        // Verify the content to make sure
        // This might not be reliable in all test environments
      } catch (error: any) {
        // This should either succeed (if branch detection works in test env)
        // or fail with a specific error about branch detection
        // Different environments might behave differently
        if (error.message && error.message.includes('auto')) {
          // This is expected if branch auto-detection attempted but failed
          expect(error.message).toMatch(/branch/i);
        } else {
          throw error; // Unexpected error
        }
      }
    });
  });

  // Additional tests using the class-method pattern (client.writeDocument/readDocument)
  describe('Class-method pattern for unified commands', () => {
    it('should use writeDocument method to write to branch memory bank', async () => {
      // Act
      const result = await client.writeDocument(
        'branch',
        testDocPath,
        'docs',
        {
          branch: testBranchName,
          content: initialDocContent,
          tags: initialDocContent.metadata.tags,
        }
      );

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data.path).toBe(testDocPath);

      // Verify content
      const readResult = await client.readDocument(
        'branch',
        testDocPath,
        'docs',
        { branch: testBranchName }
      );
      
      expect(readResult.success).toBe(true);
      expect(readResult.data.content.content.message).toBe('Initial content for unified commands test');
    });

    it('should use readDocument method to read from global memory bank', async () => {
      // Arrange - Create a global document first
      const globalDocPath = 'core/method-pattern-doc.json';
      const globalDocContent = {
        schema: 'memory_document_v2',
        documentType: 'test',
        metadata: {
          id: 'global-method-test',
          title: 'Global Method Test Doc',
          path: globalDocPath,
          tags: ['global', 'method-test'],
          version: 1,
        },
        content: { message: 'Testing class method pattern' },
      };
      
      await client.writeDocument(
        'global',
        globalDocPath,
        'docs',
        {
          content: globalDocContent,
          tags: globalDocContent.metadata.tags,
        }
      );

      // Act
      const result = await client.readDocument(
        'global',
        globalDocPath,
        'docs'
      );

      // Assert
      expect(result).toBeDefined();
      expect(result.success).toBe(true);
      expect(result.data.path).toBe(globalDocPath);
      expect(result.data.content.content.message).toBe('Testing class method pattern');
      expect(result.data.tags).toEqual(expect.arrayContaining(['global', 'method-test']));
    });
  });
});