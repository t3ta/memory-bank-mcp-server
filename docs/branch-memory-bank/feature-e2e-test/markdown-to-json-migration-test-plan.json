{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "2c9c21d0-74d5-4e76-8d84-aea1a3727574",
    "title": "Markdown→JSON移行のテスト計画",
    "documentType": "generic",
    "path": "markdown-to-json-migration-test-plan.md",
    "tags": [],
    "lastModified": "2025-03-18T15:31:34.986Z",
    "createdAt": "2025-03-18T15:31:34.986Z",
    "version": 1
  },
  "content": {
    "rawContent": "# Markdown→JSON移行のテスト計画\n\n## 背景\n\nMemory Bank MCPのドキュメント形式を段階的に変更する計画がある：\n1. Markdown (.md) → 現在からの移行対象\n2. JSON (.json) → 次の形式、現在移行中\n3. YAML (.yaml) → 将来的な目標形式\n\n現在はMarkdownからJSONへの移行フェーズであり、**Markdownへの書き込みを段階的に制限**する必要がある。\n\n## テスト戦略\n\n統合テストとして以下の5つの柱を中心に実装する：\n\n### 1. マイグレーション関連のテスト\n- Markdown → JSON変換の検証\n- 既存データの変換確認\n- 変換後の整合性チェック\n\n### 2. Markdown書き込み禁止テスト\n- Markdownへの書き込み要求がエラーになることを確認\n- 適切なエラーメッセージが返されるか確認\n- JSONパスへのリダイレクトか代替提案が行われるか\n\n### 3. JSON操作の完全性テスト\n- すべての以前Markdownで行っていた操作がJSONで可能か\n- タグ、メタデータの保存と読み込み\n- 検索・フィルタリング機能\n\n### 4. 後方互換性テスト\n- 読み取り専用としてのMarkdownサポート継続確認\n- 古いクライアントの動作検証\n\n### 5. エラーハンドリングテスト\n- 移行期特有のエラーパターン対応\n- フォーマット混在時の挙動\n\n## 追加テストケース\n- パスマッピングテスト（`.md`パスで要求→`.json`にマッピング）\n- 部分更新の挙動（Markdownだと全置換が基本だけど、JSONだと部分更新も使える）\n- エスケープシーケンス処理（Markdown特有のエスケープとJSON特有のエスケープの違い）\n\n## 実装方針\n\n1. 既存の統合テスト（controllers/）をベースに拡張\n2. 特にMarkdown書き込み禁止に関するテストを重点的に実装\n3. 各テストは独立した環境で実行されるよう設計\n4. テスト間のリソース競合を避けるため、一意のテストIDを使用\n",
    "sections": {
      "": "1. 既存の統合テスト（controllers/）をベースに拡張\n2. 特にMarkdown書き込み禁止に関するテストを重点的に実装\n3. 各テストは独立した環境で実行されるよう設計\n4. テスト間のリソース競合を避けるため、一意のテストIDを使用"
    }
  }
}