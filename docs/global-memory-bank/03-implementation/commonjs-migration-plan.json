{
  "schema": "memory_document_v2",
  "metadata": {
    "id": "accf25c0-02a1-423d-bb68-9d3ada620905",
    "title": "CommonJS移行計画 - AI実装ガイド",
    "documentType": "generic",
    "path": "commonjs-migration-plan.md",
    "tags": [],
    "lastModified": "2025-03-18T11:34:46.942Z",
    "createdAt": "2025-03-18T11:34:46.942Z",
    "version": 1
  },
  "content": {
    "__ai": "このドキュメントを読んでいるAI（あなた）は、memory-bank-mcp-serverプロジェクトのCommonJS移行を担当するDeepSeek V3です。以下の計画に従って、ユーザーと対話しながら移行を進めてください。",
    "ai": "1. このガイドラインに従って、ユーザーと対話的に移行を進めてください。\n2. 各ステップで明確な説明と選択肢を提示してください。\n3. 問題が発生した場合は、詳細な分析と解決策を提案してください。\n4. 定期的に進捗を報告し、次のステップについて合意を得てください。\n5. ユーザーのフィードバックを重視し、柔軟に計画を調整してください。",
    "background": "現在のプロジェクトはESMで構築されていますが、以下の理由からCommonJSへの移行を実施します：\n1. テストフレームワーク（Jest）との互換性向上\n2. MCPのSDKとの整合性（SDKがCommonJS形式）\n3. E2Eテストの安定性向上",
    "steps": [
      {
        "phase": "初期分析フェーズ",
        "description": "プロジェクト構造の確認、依存関係の確認、特別な要件の確認を行います。"
      },
      {
        "phase": "変換計画フェーズ",
        "description": "設定ファイルの変更提案、モジュール変換の例示を行います。"
      },
      {
        "phase": "インタラクティブな実装フェーズ",
        "description": "各ファイルの変換時に使用する対話パターンを実施します。"
      },
      {
        "phase": "テストと検証フェーズ",
        "description": "ユニットテスト、統合テストを実施します。"
      },
      {
        "phase": "パフォーマンス最適化フェーズ",
        "description": "基準性能の確認、測定結果の報告、最適化提案を行います。"
      }
    ],
    "implementationDetails": [
      {
        "step": "初期設定変更",
        "details": [
          "package.json更新",
          "tsconfig.json更新"
        ]
      },
      {
        "step": "ソースコード変換",
        "details": [
          "エンティティクラスの変換",
          "ユースケースの変換"
        ]
      },
      {
        "step": "テスト関連ファイル",
        "details": [
          "Jestの設定",
          "テストファイルの変換"
        ]
      }
    ],
    "problemSolvingGuidelines": [
      {
        "issue": "循環依存の検出",
        "solution": "インターフェースの抽出、依存関係の再設計"
      },
      {
        "issue": "型定義の問題",
        "solution": "型定義の適切な変換"
      }
    ],
    "performanceOptimization": [
      {
        "aspect": "バンドルサイズ",
        "actions": [
          "変換前後のサイズ比較",
          "最適化提案",
          "結果の検証"
        ]
      },
      {
        "aspect": "実行時パフォーマンス",
        "actions": [
          "ベンチマーク実行",
          "ボトルネックの特定",
          "改善提案"
        ]
      }
    ],
    "verificationCriteria": [
      {
        "type": "機能テスト",
        "requirements": [
          "全てのユニットテストの成功",
          "統合テストの成功",
          "E2Eテストの成功"
        ]
      },
      {
        "type": "非機能要件",
        "requirements": [
          "ビルド時間の維持/改善",
          "メモリ使用量の監視",
          "実行時パフォーマンスの確認"
        ]
      }
    ],
    "migrationCompletionCriteria": [
      {
        "type": "必須要件",
        "requirements": [
          "全てのテストが成功",
          "ビルドが正常に完了",
          "型チェックにエラーなし"
        ]
      },
      {
        "type": "品質要件",
        "requirements": [
          "パフォーマンス基準の達成",
          "コードの一貫性確保",
          "ドキュメントの更新完了"
        ]
      }
    ]
  }
}
